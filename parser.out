Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> instructions_opt
Rule 2     instructions_opt -> instructions
Rule 3     instructions_opt -> empty
Rule 4     instructions -> instructions instruction
Rule 5     instructions -> instruction
Rule 6     empty -> <empty>
Rule 7     instruction -> instruction_block
Rule 8     instruction -> assignment ;
Rule 9     instruction -> relation ;
Rule 10    instruction -> expression ;
Rule 11    instruction -> break ;
Rule 12    instruction -> continue ;
Rule 13    instruction -> return ;
Rule 14    instruction -> print ;
Rule 15    instruction -> if
Rule 16    instruction -> while
Rule 17    instruction -> for
Rule 18    instruction -> ;
Rule 19    instruction_block -> { instructions }
Rule 20    break -> BREAK
Rule 21    continue -> CONTINUE
Rule 22    return -> RETURN
Rule 23    return -> RETURN expression
Rule 24    print -> PRINT value_list
Rule 25    assignment -> var assign_op expression
Rule 26    assignment -> ref assign_op expression
Rule 27    assign_op -> =
Rule 28    assign_op -> ADDASSIGN
Rule 29    assign_op -> SUBASSIGN
Rule 30    assign_op -> MULASSIGN
Rule 31    assign_op -> DIVASSIGN
Rule 32    var -> ID
Rule 33    ref -> ID [ value_list ]
Rule 34    expression -> expression + expression
Rule 35    expression -> expression - expression
Rule 36    expression -> expression * expression
Rule 37    expression -> expression / expression
Rule 38    expression -> expression DOTADD expression
Rule 39    expression -> expression DOTSUB expression
Rule 40    expression -> expression DOTMUL expression
Rule 41    expression -> expression DOTDIV expression
Rule 42    expression -> ( expression )
Rule 43    expression -> var
Rule 44    expression -> ref
Rule 45    expression -> number
Rule 46    expression -> list
Rule 47    expression -> function
Rule 48    expression -> string
Rule 49    string -> STRING
Rule 50    function -> ZEROS ( value_list )
Rule 51    function -> EYE ( value_list )
Rule 52    function -> ONES ( value_list )
Rule 53    list -> [ value_list ]
Rule 54    list -> [ ]
Rule 55    value_list -> value_list , expression
Rule 56    value_list -> expression
Rule 57    expression -> expression '
Rule 58    number -> FLOAT
Rule 59    number -> INT
Rule 60    expression -> - expression
Rule 61    relation -> expression LT expression
Rule 62    relation -> expression GT expression
Rule 63    relation -> expression LE expression
Rule 64    relation -> expression GE expression
Rule 65    relation -> expression NE expression
Rule 66    relation -> expression EQ expression
Rule 67    if -> IF ( relation ) instruction
Rule 68    if -> IF ( relation ) instruction ELSE instruction
Rule 69    while -> WHILE ( relation ) instruction
Rule 70    range -> expression : expression
Rule 71    for -> FOR ID = range instruction

Terminals, with rules where they appear

'                    : 57
(                    : 42 50 51 52 67 68 69
)                    : 42 50 51 52 67 68 69
*                    : 36
+                    : 34
,                    : 55
-                    : 35 60
/                    : 37
:                    : 70
;                    : 8 9 10 11 12 13 14 18
=                    : 27 71
ADDASSIGN            : 28
BREAK                : 20
CONTINUE             : 21
DIVASSIGN            : 31
DOTADD               : 38
DOTDIV               : 41
DOTMUL               : 40
DOTSUB               : 39
ELSE                 : 68
EQ                   : 66
EYE                  : 51
FLOAT                : 58
FOR                  : 71
GE                   : 64
GT                   : 62
ID                   : 32 33 71
IF                   : 67 68
INT                  : 59
LE                   : 63
LT                   : 61
MULASSIGN            : 30
NE                   : 65
ONES                 : 52
PRINT                : 24
RETURN               : 22 23
STRING               : 49
SUBASSIGN            : 29
WHILE                : 69
ZEROS                : 50
[                    : 33 53 54
]                    : 33 53 54
error                : 
{                    : 19
}                    : 19

Nonterminals, with rules where they appear

assign_op            : 25 26
assignment           : 8
break                : 11
continue             : 12
empty                : 3
expression           : 10 23 25 26 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 55 56 57 60 61 61 62 62 63 63 64 64 65 65 66 66 70 70
for                  : 17
function             : 47
if                   : 15
instruction          : 4 5 67 68 68 69 71
instruction_block    : 7
instructions         : 2 4 19
instructions_opt     : 1
list                 : 46
number               : 45
print                : 14
program              : 0
range                : 71
ref                  : 26 44
relation             : 9 67 68 69
return               : 13
string               : 48
value_list           : 24 33 50 51 52 53 55
var                  : 25 43
while                : 16

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . instructions_opt
    (2) instructions_opt -> . instructions
    (3) instructions_opt -> . empty
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) empty -> .
    (7) instruction -> . instruction_block
    (8) instruction -> . assignment ;
    (9) instruction -> . relation ;
    (10) instruction -> . expression ;
    (11) instruction -> . break ;
    (12) instruction -> . continue ;
    (13) instruction -> . return ;
    (14) instruction -> . print ;
    (15) instruction -> . if
    (16) instruction -> . while
    (17) instruction -> . for
    (18) instruction -> . ;
    (19) instruction_block -> . { instructions }
    (25) assignment -> . var assign_op expression
    (26) assignment -> . ref assign_op expression
    (61) relation -> . expression LT expression
    (62) relation -> . expression GT expression
    (63) relation -> . expression LE expression
    (64) relation -> . expression GE expression
    (65) relation -> . expression NE expression
    (66) relation -> . expression EQ expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (20) break -> . BREAK
    (21) continue -> . CONTINUE
    (22) return -> . RETURN
    (23) return -> . RETURN expression
    (24) print -> . PRINT value_list
    (67) if -> . IF ( relation ) instruction
    (68) if -> . IF ( relation ) instruction ELSE instruction
    (69) while -> . WHILE ( relation ) instruction
    (71) for -> . FOR ID = range instruction
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    $end            reduce using rule 6 (empty -> .)
    ;               shift and go to state 8
    {               shift and go to state 18
    (               shift and go to state 22
    -               shift and go to state 21
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 29
    PRINT           shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    program                        shift and go to state 1
    instructions_opt               shift and go to state 2
    instructions                   shift and go to state 3
    empty                          shift and go to state 4
    instruction                    shift and go to state 5
    instruction_block              shift and go to state 6
    assignment                     shift and go to state 7
    relation                       shift and go to state 9
    expression                     shift and go to state 10
    break                          shift and go to state 11
    continue                       shift and go to state 12
    return                         shift and go to state 13
    print                          shift and go to state 14
    if                             shift and go to state 15
    while                          shift and go to state 16
    for                            shift and go to state 17
    var                            shift and go to state 19
    ref                            shift and go to state 20
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 1

    (0) S' -> program .



state 2

    (1) program -> instructions_opt .

    $end            reduce using rule 1 (program -> instructions_opt .)


state 3

    (2) instructions_opt -> instructions .
    (4) instructions -> instructions . instruction
    (7) instruction -> . instruction_block
    (8) instruction -> . assignment ;
    (9) instruction -> . relation ;
    (10) instruction -> . expression ;
    (11) instruction -> . break ;
    (12) instruction -> . continue ;
    (13) instruction -> . return ;
    (14) instruction -> . print ;
    (15) instruction -> . if
    (16) instruction -> . while
    (17) instruction -> . for
    (18) instruction -> . ;
    (19) instruction_block -> . { instructions }
    (25) assignment -> . var assign_op expression
    (26) assignment -> . ref assign_op expression
    (61) relation -> . expression LT expression
    (62) relation -> . expression GT expression
    (63) relation -> . expression LE expression
    (64) relation -> . expression GE expression
    (65) relation -> . expression NE expression
    (66) relation -> . expression EQ expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (20) break -> . BREAK
    (21) continue -> . CONTINUE
    (22) return -> . RETURN
    (23) return -> . RETURN expression
    (24) print -> . PRINT value_list
    (67) if -> . IF ( relation ) instruction
    (68) if -> . IF ( relation ) instruction ELSE instruction
    (69) while -> . WHILE ( relation ) instruction
    (71) for -> . FOR ID = range instruction
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    $end            reduce using rule 2 (instructions_opt -> instructions .)
    ;               shift and go to state 8
    {               shift and go to state 18
    (               shift and go to state 22
    -               shift and go to state 21
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 29
    PRINT           shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    instruction                    shift and go to state 42
    instruction_block              shift and go to state 6
    assignment                     shift and go to state 7
    relation                       shift and go to state 9
    expression                     shift and go to state 10
    break                          shift and go to state 11
    continue                       shift and go to state 12
    return                         shift and go to state 13
    print                          shift and go to state 14
    if                             shift and go to state 15
    while                          shift and go to state 16
    for                            shift and go to state 17
    var                            shift and go to state 19
    ref                            shift and go to state 20
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 4

    (3) instructions_opt -> empty .

    $end            reduce using rule 3 (instructions_opt -> empty .)


state 5

    (5) instructions -> instruction .

    ;               reduce using rule 5 (instructions -> instruction .)
    {               reduce using rule 5 (instructions -> instruction .)
    (               reduce using rule 5 (instructions -> instruction .)
    -               reduce using rule 5 (instructions -> instruction .)
    BREAK           reduce using rule 5 (instructions -> instruction .)
    CONTINUE        reduce using rule 5 (instructions -> instruction .)
    RETURN          reduce using rule 5 (instructions -> instruction .)
    PRINT           reduce using rule 5 (instructions -> instruction .)
    IF              reduce using rule 5 (instructions -> instruction .)
    WHILE           reduce using rule 5 (instructions -> instruction .)
    FOR             reduce using rule 5 (instructions -> instruction .)
    ID              reduce using rule 5 (instructions -> instruction .)
    FLOAT           reduce using rule 5 (instructions -> instruction .)
    INT             reduce using rule 5 (instructions -> instruction .)
    [               reduce using rule 5 (instructions -> instruction .)
    ZEROS           reduce using rule 5 (instructions -> instruction .)
    EYE             reduce using rule 5 (instructions -> instruction .)
    ONES            reduce using rule 5 (instructions -> instruction .)
    STRING          reduce using rule 5 (instructions -> instruction .)
    $end            reduce using rule 5 (instructions -> instruction .)
    }               reduce using rule 5 (instructions -> instruction .)


state 6

    (7) instruction -> instruction_block .

    ;               reduce using rule 7 (instruction -> instruction_block .)
    {               reduce using rule 7 (instruction -> instruction_block .)
    (               reduce using rule 7 (instruction -> instruction_block .)
    -               reduce using rule 7 (instruction -> instruction_block .)
    BREAK           reduce using rule 7 (instruction -> instruction_block .)
    CONTINUE        reduce using rule 7 (instruction -> instruction_block .)
    RETURN          reduce using rule 7 (instruction -> instruction_block .)
    PRINT           reduce using rule 7 (instruction -> instruction_block .)
    IF              reduce using rule 7 (instruction -> instruction_block .)
    WHILE           reduce using rule 7 (instruction -> instruction_block .)
    FOR             reduce using rule 7 (instruction -> instruction_block .)
    ID              reduce using rule 7 (instruction -> instruction_block .)
    FLOAT           reduce using rule 7 (instruction -> instruction_block .)
    INT             reduce using rule 7 (instruction -> instruction_block .)
    [               reduce using rule 7 (instruction -> instruction_block .)
    ZEROS           reduce using rule 7 (instruction -> instruction_block .)
    EYE             reduce using rule 7 (instruction -> instruction_block .)
    ONES            reduce using rule 7 (instruction -> instruction_block .)
    STRING          reduce using rule 7 (instruction -> instruction_block .)
    $end            reduce using rule 7 (instruction -> instruction_block .)
    }               reduce using rule 7 (instruction -> instruction_block .)
    ELSE            reduce using rule 7 (instruction -> instruction_block .)


state 7

    (8) instruction -> assignment . ;

    ;               shift and go to state 43


state 8

    (18) instruction -> ; .

    ;               reduce using rule 18 (instruction -> ; .)
    {               reduce using rule 18 (instruction -> ; .)
    (               reduce using rule 18 (instruction -> ; .)
    -               reduce using rule 18 (instruction -> ; .)
    BREAK           reduce using rule 18 (instruction -> ; .)
    CONTINUE        reduce using rule 18 (instruction -> ; .)
    RETURN          reduce using rule 18 (instruction -> ; .)
    PRINT           reduce using rule 18 (instruction -> ; .)
    IF              reduce using rule 18 (instruction -> ; .)
    WHILE           reduce using rule 18 (instruction -> ; .)
    FOR             reduce using rule 18 (instruction -> ; .)
    ID              reduce using rule 18 (instruction -> ; .)
    FLOAT           reduce using rule 18 (instruction -> ; .)
    INT             reduce using rule 18 (instruction -> ; .)
    [               reduce using rule 18 (instruction -> ; .)
    ZEROS           reduce using rule 18 (instruction -> ; .)
    EYE             reduce using rule 18 (instruction -> ; .)
    ONES            reduce using rule 18 (instruction -> ; .)
    STRING          reduce using rule 18 (instruction -> ; .)
    $end            reduce using rule 18 (instruction -> ; .)
    }               reduce using rule 18 (instruction -> ; .)
    ELSE            reduce using rule 18 (instruction -> ; .)


state 9

    (9) instruction -> relation . ;

    ;               shift and go to state 44


state 10

    (10) instruction -> expression . ;
    (61) relation -> expression . LT expression
    (62) relation -> expression . GT expression
    (63) relation -> expression . LE expression
    (64) relation -> expression . GE expression
    (65) relation -> expression . NE expression
    (66) relation -> expression . EQ expression
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . DOTADD expression
    (39) expression -> expression . DOTSUB expression
    (40) expression -> expression . DOTMUL expression
    (41) expression -> expression . DOTDIV expression
    (57) expression -> expression . '

    ;               shift and go to state 45
    LT              shift and go to state 46
    GT              shift and go to state 47
    LE              shift and go to state 48
    GE              shift and go to state 49
    NE              shift and go to state 50
    EQ              shift and go to state 51
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60


state 11

    (11) instruction -> break . ;

    ;               shift and go to state 61


state 12

    (12) instruction -> continue . ;

    ;               shift and go to state 62


state 13

    (13) instruction -> return . ;

    ;               shift and go to state 63


state 14

    (14) instruction -> print . ;

    ;               shift and go to state 64


state 15

    (15) instruction -> if .

    ;               reduce using rule 15 (instruction -> if .)
    {               reduce using rule 15 (instruction -> if .)
    (               reduce using rule 15 (instruction -> if .)
    -               reduce using rule 15 (instruction -> if .)
    BREAK           reduce using rule 15 (instruction -> if .)
    CONTINUE        reduce using rule 15 (instruction -> if .)
    RETURN          reduce using rule 15 (instruction -> if .)
    PRINT           reduce using rule 15 (instruction -> if .)
    IF              reduce using rule 15 (instruction -> if .)
    WHILE           reduce using rule 15 (instruction -> if .)
    FOR             reduce using rule 15 (instruction -> if .)
    ID              reduce using rule 15 (instruction -> if .)
    FLOAT           reduce using rule 15 (instruction -> if .)
    INT             reduce using rule 15 (instruction -> if .)
    [               reduce using rule 15 (instruction -> if .)
    ZEROS           reduce using rule 15 (instruction -> if .)
    EYE             reduce using rule 15 (instruction -> if .)
    ONES            reduce using rule 15 (instruction -> if .)
    STRING          reduce using rule 15 (instruction -> if .)
    $end            reduce using rule 15 (instruction -> if .)
    }               reduce using rule 15 (instruction -> if .)
    ELSE            reduce using rule 15 (instruction -> if .)


state 16

    (16) instruction -> while .

    ;               reduce using rule 16 (instruction -> while .)
    {               reduce using rule 16 (instruction -> while .)
    (               reduce using rule 16 (instruction -> while .)
    -               reduce using rule 16 (instruction -> while .)
    BREAK           reduce using rule 16 (instruction -> while .)
    CONTINUE        reduce using rule 16 (instruction -> while .)
    RETURN          reduce using rule 16 (instruction -> while .)
    PRINT           reduce using rule 16 (instruction -> while .)
    IF              reduce using rule 16 (instruction -> while .)
    WHILE           reduce using rule 16 (instruction -> while .)
    FOR             reduce using rule 16 (instruction -> while .)
    ID              reduce using rule 16 (instruction -> while .)
    FLOAT           reduce using rule 16 (instruction -> while .)
    INT             reduce using rule 16 (instruction -> while .)
    [               reduce using rule 16 (instruction -> while .)
    ZEROS           reduce using rule 16 (instruction -> while .)
    EYE             reduce using rule 16 (instruction -> while .)
    ONES            reduce using rule 16 (instruction -> while .)
    STRING          reduce using rule 16 (instruction -> while .)
    $end            reduce using rule 16 (instruction -> while .)
    }               reduce using rule 16 (instruction -> while .)
    ELSE            reduce using rule 16 (instruction -> while .)


state 17

    (17) instruction -> for .

    ;               reduce using rule 17 (instruction -> for .)
    {               reduce using rule 17 (instruction -> for .)
    (               reduce using rule 17 (instruction -> for .)
    -               reduce using rule 17 (instruction -> for .)
    BREAK           reduce using rule 17 (instruction -> for .)
    CONTINUE        reduce using rule 17 (instruction -> for .)
    RETURN          reduce using rule 17 (instruction -> for .)
    PRINT           reduce using rule 17 (instruction -> for .)
    IF              reduce using rule 17 (instruction -> for .)
    WHILE           reduce using rule 17 (instruction -> for .)
    FOR             reduce using rule 17 (instruction -> for .)
    ID              reduce using rule 17 (instruction -> for .)
    FLOAT           reduce using rule 17 (instruction -> for .)
    INT             reduce using rule 17 (instruction -> for .)
    [               reduce using rule 17 (instruction -> for .)
    ZEROS           reduce using rule 17 (instruction -> for .)
    EYE             reduce using rule 17 (instruction -> for .)
    ONES            reduce using rule 17 (instruction -> for .)
    STRING          reduce using rule 17 (instruction -> for .)
    $end            reduce using rule 17 (instruction -> for .)
    }               reduce using rule 17 (instruction -> for .)
    ELSE            reduce using rule 17 (instruction -> for .)


state 18

    (19) instruction_block -> { . instructions }
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (7) instruction -> . instruction_block
    (8) instruction -> . assignment ;
    (9) instruction -> . relation ;
    (10) instruction -> . expression ;
    (11) instruction -> . break ;
    (12) instruction -> . continue ;
    (13) instruction -> . return ;
    (14) instruction -> . print ;
    (15) instruction -> . if
    (16) instruction -> . while
    (17) instruction -> . for
    (18) instruction -> . ;
    (19) instruction_block -> . { instructions }
    (25) assignment -> . var assign_op expression
    (26) assignment -> . ref assign_op expression
    (61) relation -> . expression LT expression
    (62) relation -> . expression GT expression
    (63) relation -> . expression LE expression
    (64) relation -> . expression GE expression
    (65) relation -> . expression NE expression
    (66) relation -> . expression EQ expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (20) break -> . BREAK
    (21) continue -> . CONTINUE
    (22) return -> . RETURN
    (23) return -> . RETURN expression
    (24) print -> . PRINT value_list
    (67) if -> . IF ( relation ) instruction
    (68) if -> . IF ( relation ) instruction ELSE instruction
    (69) while -> . WHILE ( relation ) instruction
    (71) for -> . FOR ID = range instruction
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    ;               shift and go to state 8
    {               shift and go to state 18
    (               shift and go to state 22
    -               shift and go to state 21
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 29
    PRINT           shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    instructions                   shift and go to state 65
    instruction                    shift and go to state 5
    instruction_block              shift and go to state 6
    assignment                     shift and go to state 7
    relation                       shift and go to state 9
    expression                     shift and go to state 10
    break                          shift and go to state 11
    continue                       shift and go to state 12
    return                         shift and go to state 13
    print                          shift and go to state 14
    if                             shift and go to state 15
    while                          shift and go to state 16
    for                            shift and go to state 17
    var                            shift and go to state 19
    ref                            shift and go to state 20
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 19

    (25) assignment -> var . assign_op expression
    (43) expression -> var .
    (27) assign_op -> . =
    (28) assign_op -> . ADDASSIGN
    (29) assign_op -> . SUBASSIGN
    (30) assign_op -> . MULASSIGN
    (31) assign_op -> . DIVASSIGN

    ;               reduce using rule 43 (expression -> var .)
    LT              reduce using rule 43 (expression -> var .)
    GT              reduce using rule 43 (expression -> var .)
    LE              reduce using rule 43 (expression -> var .)
    GE              reduce using rule 43 (expression -> var .)
    NE              reduce using rule 43 (expression -> var .)
    EQ              reduce using rule 43 (expression -> var .)
    +               reduce using rule 43 (expression -> var .)
    -               reduce using rule 43 (expression -> var .)
    *               reduce using rule 43 (expression -> var .)
    /               reduce using rule 43 (expression -> var .)
    DOTADD          reduce using rule 43 (expression -> var .)
    DOTSUB          reduce using rule 43 (expression -> var .)
    DOTMUL          reduce using rule 43 (expression -> var .)
    DOTDIV          reduce using rule 43 (expression -> var .)
    '               reduce using rule 43 (expression -> var .)
    =               shift and go to state 67
    ADDASSIGN       shift and go to state 68
    SUBASSIGN       shift and go to state 69
    MULASSIGN       shift and go to state 70
    DIVASSIGN       shift and go to state 71

    assign_op                      shift and go to state 66

state 20

    (26) assignment -> ref . assign_op expression
    (44) expression -> ref .
    (27) assign_op -> . =
    (28) assign_op -> . ADDASSIGN
    (29) assign_op -> . SUBASSIGN
    (30) assign_op -> . MULASSIGN
    (31) assign_op -> . DIVASSIGN

    ;               reduce using rule 44 (expression -> ref .)
    LT              reduce using rule 44 (expression -> ref .)
    GT              reduce using rule 44 (expression -> ref .)
    LE              reduce using rule 44 (expression -> ref .)
    GE              reduce using rule 44 (expression -> ref .)
    NE              reduce using rule 44 (expression -> ref .)
    EQ              reduce using rule 44 (expression -> ref .)
    +               reduce using rule 44 (expression -> ref .)
    -               reduce using rule 44 (expression -> ref .)
    *               reduce using rule 44 (expression -> ref .)
    /               reduce using rule 44 (expression -> ref .)
    DOTADD          reduce using rule 44 (expression -> ref .)
    DOTSUB          reduce using rule 44 (expression -> ref .)
    DOTMUL          reduce using rule 44 (expression -> ref .)
    DOTDIV          reduce using rule 44 (expression -> ref .)
    '               reduce using rule 44 (expression -> ref .)
    =               shift and go to state 67
    ADDASSIGN       shift and go to state 68
    SUBASSIGN       shift and go to state 69
    MULASSIGN       shift and go to state 70
    DIVASSIGN       shift and go to state 71

    assign_op                      shift and go to state 72

state 21

    (60) expression -> - . expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    expression                     shift and go to state 73
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 22

    (42) expression -> ( . expression )
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    expression                     shift and go to state 76
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 23

    (45) expression -> number .

    ;               reduce using rule 45 (expression -> number .)
    LT              reduce using rule 45 (expression -> number .)
    GT              reduce using rule 45 (expression -> number .)
    LE              reduce using rule 45 (expression -> number .)
    GE              reduce using rule 45 (expression -> number .)
    NE              reduce using rule 45 (expression -> number .)
    EQ              reduce using rule 45 (expression -> number .)
    +               reduce using rule 45 (expression -> number .)
    -               reduce using rule 45 (expression -> number .)
    *               reduce using rule 45 (expression -> number .)
    /               reduce using rule 45 (expression -> number .)
    DOTADD          reduce using rule 45 (expression -> number .)
    DOTSUB          reduce using rule 45 (expression -> number .)
    DOTMUL          reduce using rule 45 (expression -> number .)
    DOTDIV          reduce using rule 45 (expression -> number .)
    '               reduce using rule 45 (expression -> number .)
    )               reduce using rule 45 (expression -> number .)
    ,               reduce using rule 45 (expression -> number .)
    ]               reduce using rule 45 (expression -> number .)
    :               reduce using rule 45 (expression -> number .)
    {               reduce using rule 45 (expression -> number .)
    (               reduce using rule 45 (expression -> number .)
    BREAK           reduce using rule 45 (expression -> number .)
    CONTINUE        reduce using rule 45 (expression -> number .)
    RETURN          reduce using rule 45 (expression -> number .)
    PRINT           reduce using rule 45 (expression -> number .)
    IF              reduce using rule 45 (expression -> number .)
    WHILE           reduce using rule 45 (expression -> number .)
    FOR             reduce using rule 45 (expression -> number .)
    ID              reduce using rule 45 (expression -> number .)
    FLOAT           reduce using rule 45 (expression -> number .)
    INT             reduce using rule 45 (expression -> number .)
    [               reduce using rule 45 (expression -> number .)
    ZEROS           reduce using rule 45 (expression -> number .)
    EYE             reduce using rule 45 (expression -> number .)
    ONES            reduce using rule 45 (expression -> number .)
    STRING          reduce using rule 45 (expression -> number .)


state 24

    (46) expression -> list .

    ;               reduce using rule 46 (expression -> list .)
    LT              reduce using rule 46 (expression -> list .)
    GT              reduce using rule 46 (expression -> list .)
    LE              reduce using rule 46 (expression -> list .)
    GE              reduce using rule 46 (expression -> list .)
    NE              reduce using rule 46 (expression -> list .)
    EQ              reduce using rule 46 (expression -> list .)
    +               reduce using rule 46 (expression -> list .)
    -               reduce using rule 46 (expression -> list .)
    *               reduce using rule 46 (expression -> list .)
    /               reduce using rule 46 (expression -> list .)
    DOTADD          reduce using rule 46 (expression -> list .)
    DOTSUB          reduce using rule 46 (expression -> list .)
    DOTMUL          reduce using rule 46 (expression -> list .)
    DOTDIV          reduce using rule 46 (expression -> list .)
    '               reduce using rule 46 (expression -> list .)
    )               reduce using rule 46 (expression -> list .)
    ,               reduce using rule 46 (expression -> list .)
    ]               reduce using rule 46 (expression -> list .)
    :               reduce using rule 46 (expression -> list .)
    {               reduce using rule 46 (expression -> list .)
    (               reduce using rule 46 (expression -> list .)
    BREAK           reduce using rule 46 (expression -> list .)
    CONTINUE        reduce using rule 46 (expression -> list .)
    RETURN          reduce using rule 46 (expression -> list .)
    PRINT           reduce using rule 46 (expression -> list .)
    IF              reduce using rule 46 (expression -> list .)
    WHILE           reduce using rule 46 (expression -> list .)
    FOR             reduce using rule 46 (expression -> list .)
    ID              reduce using rule 46 (expression -> list .)
    FLOAT           reduce using rule 46 (expression -> list .)
    INT             reduce using rule 46 (expression -> list .)
    [               reduce using rule 46 (expression -> list .)
    ZEROS           reduce using rule 46 (expression -> list .)
    EYE             reduce using rule 46 (expression -> list .)
    ONES            reduce using rule 46 (expression -> list .)
    STRING          reduce using rule 46 (expression -> list .)


state 25

    (47) expression -> function .

    ;               reduce using rule 47 (expression -> function .)
    LT              reduce using rule 47 (expression -> function .)
    GT              reduce using rule 47 (expression -> function .)
    LE              reduce using rule 47 (expression -> function .)
    GE              reduce using rule 47 (expression -> function .)
    NE              reduce using rule 47 (expression -> function .)
    EQ              reduce using rule 47 (expression -> function .)
    +               reduce using rule 47 (expression -> function .)
    -               reduce using rule 47 (expression -> function .)
    *               reduce using rule 47 (expression -> function .)
    /               reduce using rule 47 (expression -> function .)
    DOTADD          reduce using rule 47 (expression -> function .)
    DOTSUB          reduce using rule 47 (expression -> function .)
    DOTMUL          reduce using rule 47 (expression -> function .)
    DOTDIV          reduce using rule 47 (expression -> function .)
    '               reduce using rule 47 (expression -> function .)
    )               reduce using rule 47 (expression -> function .)
    ,               reduce using rule 47 (expression -> function .)
    ]               reduce using rule 47 (expression -> function .)
    :               reduce using rule 47 (expression -> function .)
    {               reduce using rule 47 (expression -> function .)
    (               reduce using rule 47 (expression -> function .)
    BREAK           reduce using rule 47 (expression -> function .)
    CONTINUE        reduce using rule 47 (expression -> function .)
    RETURN          reduce using rule 47 (expression -> function .)
    PRINT           reduce using rule 47 (expression -> function .)
    IF              reduce using rule 47 (expression -> function .)
    WHILE           reduce using rule 47 (expression -> function .)
    FOR             reduce using rule 47 (expression -> function .)
    ID              reduce using rule 47 (expression -> function .)
    FLOAT           reduce using rule 47 (expression -> function .)
    INT             reduce using rule 47 (expression -> function .)
    [               reduce using rule 47 (expression -> function .)
    ZEROS           reduce using rule 47 (expression -> function .)
    EYE             reduce using rule 47 (expression -> function .)
    ONES            reduce using rule 47 (expression -> function .)
    STRING          reduce using rule 47 (expression -> function .)


state 26

    (48) expression -> string .

    ;               reduce using rule 48 (expression -> string .)
    LT              reduce using rule 48 (expression -> string .)
    GT              reduce using rule 48 (expression -> string .)
    LE              reduce using rule 48 (expression -> string .)
    GE              reduce using rule 48 (expression -> string .)
    NE              reduce using rule 48 (expression -> string .)
    EQ              reduce using rule 48 (expression -> string .)
    +               reduce using rule 48 (expression -> string .)
    -               reduce using rule 48 (expression -> string .)
    *               reduce using rule 48 (expression -> string .)
    /               reduce using rule 48 (expression -> string .)
    DOTADD          reduce using rule 48 (expression -> string .)
    DOTSUB          reduce using rule 48 (expression -> string .)
    DOTMUL          reduce using rule 48 (expression -> string .)
    DOTDIV          reduce using rule 48 (expression -> string .)
    '               reduce using rule 48 (expression -> string .)
    )               reduce using rule 48 (expression -> string .)
    ,               reduce using rule 48 (expression -> string .)
    ]               reduce using rule 48 (expression -> string .)
    :               reduce using rule 48 (expression -> string .)
    {               reduce using rule 48 (expression -> string .)
    (               reduce using rule 48 (expression -> string .)
    BREAK           reduce using rule 48 (expression -> string .)
    CONTINUE        reduce using rule 48 (expression -> string .)
    RETURN          reduce using rule 48 (expression -> string .)
    PRINT           reduce using rule 48 (expression -> string .)
    IF              reduce using rule 48 (expression -> string .)
    WHILE           reduce using rule 48 (expression -> string .)
    FOR             reduce using rule 48 (expression -> string .)
    ID              reduce using rule 48 (expression -> string .)
    FLOAT           reduce using rule 48 (expression -> string .)
    INT             reduce using rule 48 (expression -> string .)
    [               reduce using rule 48 (expression -> string .)
    ZEROS           reduce using rule 48 (expression -> string .)
    EYE             reduce using rule 48 (expression -> string .)
    ONES            reduce using rule 48 (expression -> string .)
    STRING          reduce using rule 48 (expression -> string .)


state 27

    (20) break -> BREAK .

    ;               reduce using rule 20 (break -> BREAK .)


state 28

    (21) continue -> CONTINUE .

    ;               reduce using rule 21 (continue -> CONTINUE .)


state 29

    (22) return -> RETURN .
    (23) return -> RETURN . expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    ;               reduce using rule 22 (return -> RETURN .)
    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    expression                     shift and go to state 77
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 30

    (24) print -> PRINT . value_list
    (55) value_list -> . value_list , expression
    (56) value_list -> . expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    value_list                     shift and go to state 78
    expression                     shift and go to state 79
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 31

    (67) if -> IF . ( relation ) instruction
    (68) if -> IF . ( relation ) instruction ELSE instruction

    (               shift and go to state 80


state 32

    (69) while -> WHILE . ( relation ) instruction

    (               shift and go to state 81


state 33

    (71) for -> FOR . ID = range instruction

    ID              shift and go to state 82


state 34

    (32) var -> ID .
    (33) ref -> ID . [ value_list ]

    =               reduce using rule 32 (var -> ID .)
    ADDASSIGN       reduce using rule 32 (var -> ID .)
    SUBASSIGN       reduce using rule 32 (var -> ID .)
    MULASSIGN       reduce using rule 32 (var -> ID .)
    DIVASSIGN       reduce using rule 32 (var -> ID .)
    ;               reduce using rule 32 (var -> ID .)
    LT              reduce using rule 32 (var -> ID .)
    GT              reduce using rule 32 (var -> ID .)
    LE              reduce using rule 32 (var -> ID .)
    GE              reduce using rule 32 (var -> ID .)
    NE              reduce using rule 32 (var -> ID .)
    EQ              reduce using rule 32 (var -> ID .)
    +               reduce using rule 32 (var -> ID .)
    -               reduce using rule 32 (var -> ID .)
    *               reduce using rule 32 (var -> ID .)
    /               reduce using rule 32 (var -> ID .)
    DOTADD          reduce using rule 32 (var -> ID .)
    DOTSUB          reduce using rule 32 (var -> ID .)
    DOTMUL          reduce using rule 32 (var -> ID .)
    DOTDIV          reduce using rule 32 (var -> ID .)
    '               reduce using rule 32 (var -> ID .)
    )               reduce using rule 32 (var -> ID .)
    ,               reduce using rule 32 (var -> ID .)
    ]               reduce using rule 32 (var -> ID .)
    :               reduce using rule 32 (var -> ID .)
    {               reduce using rule 32 (var -> ID .)
    (               reduce using rule 32 (var -> ID .)
    BREAK           reduce using rule 32 (var -> ID .)
    CONTINUE        reduce using rule 32 (var -> ID .)
    RETURN          reduce using rule 32 (var -> ID .)
    PRINT           reduce using rule 32 (var -> ID .)
    IF              reduce using rule 32 (var -> ID .)
    WHILE           reduce using rule 32 (var -> ID .)
    FOR             reduce using rule 32 (var -> ID .)
    ID              reduce using rule 32 (var -> ID .)
    FLOAT           reduce using rule 32 (var -> ID .)
    INT             reduce using rule 32 (var -> ID .)
    ZEROS           reduce using rule 32 (var -> ID .)
    EYE             reduce using rule 32 (var -> ID .)
    ONES            reduce using rule 32 (var -> ID .)
    STRING          reduce using rule 32 (var -> ID .)
    [               shift and go to state 83

  ! [               [ reduce using rule 32 (var -> ID .) ]


state 35

    (53) list -> [ . value_list ]
    (54) list -> [ . ]
    (55) value_list -> . value_list , expression
    (56) value_list -> . expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    ]               shift and go to state 85
    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    value_list                     shift and go to state 84
    expression                     shift and go to state 79
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 36

    (58) number -> FLOAT .

    ;               reduce using rule 58 (number -> FLOAT .)
    LT              reduce using rule 58 (number -> FLOAT .)
    GT              reduce using rule 58 (number -> FLOAT .)
    LE              reduce using rule 58 (number -> FLOAT .)
    GE              reduce using rule 58 (number -> FLOAT .)
    NE              reduce using rule 58 (number -> FLOAT .)
    EQ              reduce using rule 58 (number -> FLOAT .)
    +               reduce using rule 58 (number -> FLOAT .)
    -               reduce using rule 58 (number -> FLOAT .)
    *               reduce using rule 58 (number -> FLOAT .)
    /               reduce using rule 58 (number -> FLOAT .)
    DOTADD          reduce using rule 58 (number -> FLOAT .)
    DOTSUB          reduce using rule 58 (number -> FLOAT .)
    DOTMUL          reduce using rule 58 (number -> FLOAT .)
    DOTDIV          reduce using rule 58 (number -> FLOAT .)
    '               reduce using rule 58 (number -> FLOAT .)
    )               reduce using rule 58 (number -> FLOAT .)
    ,               reduce using rule 58 (number -> FLOAT .)
    ]               reduce using rule 58 (number -> FLOAT .)
    :               reduce using rule 58 (number -> FLOAT .)
    {               reduce using rule 58 (number -> FLOAT .)
    (               reduce using rule 58 (number -> FLOAT .)
    BREAK           reduce using rule 58 (number -> FLOAT .)
    CONTINUE        reduce using rule 58 (number -> FLOAT .)
    RETURN          reduce using rule 58 (number -> FLOAT .)
    PRINT           reduce using rule 58 (number -> FLOAT .)
    IF              reduce using rule 58 (number -> FLOAT .)
    WHILE           reduce using rule 58 (number -> FLOAT .)
    FOR             reduce using rule 58 (number -> FLOAT .)
    ID              reduce using rule 58 (number -> FLOAT .)
    FLOAT           reduce using rule 58 (number -> FLOAT .)
    INT             reduce using rule 58 (number -> FLOAT .)
    [               reduce using rule 58 (number -> FLOAT .)
    ZEROS           reduce using rule 58 (number -> FLOAT .)
    EYE             reduce using rule 58 (number -> FLOAT .)
    ONES            reduce using rule 58 (number -> FLOAT .)
    STRING          reduce using rule 58 (number -> FLOAT .)


state 37

    (59) number -> INT .

    ;               reduce using rule 59 (number -> INT .)
    LT              reduce using rule 59 (number -> INT .)
    GT              reduce using rule 59 (number -> INT .)
    LE              reduce using rule 59 (number -> INT .)
    GE              reduce using rule 59 (number -> INT .)
    NE              reduce using rule 59 (number -> INT .)
    EQ              reduce using rule 59 (number -> INT .)
    +               reduce using rule 59 (number -> INT .)
    -               reduce using rule 59 (number -> INT .)
    *               reduce using rule 59 (number -> INT .)
    /               reduce using rule 59 (number -> INT .)
    DOTADD          reduce using rule 59 (number -> INT .)
    DOTSUB          reduce using rule 59 (number -> INT .)
    DOTMUL          reduce using rule 59 (number -> INT .)
    DOTDIV          reduce using rule 59 (number -> INT .)
    '               reduce using rule 59 (number -> INT .)
    )               reduce using rule 59 (number -> INT .)
    ,               reduce using rule 59 (number -> INT .)
    ]               reduce using rule 59 (number -> INT .)
    :               reduce using rule 59 (number -> INT .)
    {               reduce using rule 59 (number -> INT .)
    (               reduce using rule 59 (number -> INT .)
    BREAK           reduce using rule 59 (number -> INT .)
    CONTINUE        reduce using rule 59 (number -> INT .)
    RETURN          reduce using rule 59 (number -> INT .)
    PRINT           reduce using rule 59 (number -> INT .)
    IF              reduce using rule 59 (number -> INT .)
    WHILE           reduce using rule 59 (number -> INT .)
    FOR             reduce using rule 59 (number -> INT .)
    ID              reduce using rule 59 (number -> INT .)
    FLOAT           reduce using rule 59 (number -> INT .)
    INT             reduce using rule 59 (number -> INT .)
    [               reduce using rule 59 (number -> INT .)
    ZEROS           reduce using rule 59 (number -> INT .)
    EYE             reduce using rule 59 (number -> INT .)
    ONES            reduce using rule 59 (number -> INT .)
    STRING          reduce using rule 59 (number -> INT .)


state 38

    (50) function -> ZEROS . ( value_list )

    (               shift and go to state 86


state 39

    (51) function -> EYE . ( value_list )

    (               shift and go to state 87


state 40

    (52) function -> ONES . ( value_list )

    (               shift and go to state 88


state 41

    (49) string -> STRING .

    ;               reduce using rule 49 (string -> STRING .)
    LT              reduce using rule 49 (string -> STRING .)
    GT              reduce using rule 49 (string -> STRING .)
    LE              reduce using rule 49 (string -> STRING .)
    GE              reduce using rule 49 (string -> STRING .)
    NE              reduce using rule 49 (string -> STRING .)
    EQ              reduce using rule 49 (string -> STRING .)
    +               reduce using rule 49 (string -> STRING .)
    -               reduce using rule 49 (string -> STRING .)
    *               reduce using rule 49 (string -> STRING .)
    /               reduce using rule 49 (string -> STRING .)
    DOTADD          reduce using rule 49 (string -> STRING .)
    DOTSUB          reduce using rule 49 (string -> STRING .)
    DOTMUL          reduce using rule 49 (string -> STRING .)
    DOTDIV          reduce using rule 49 (string -> STRING .)
    '               reduce using rule 49 (string -> STRING .)
    )               reduce using rule 49 (string -> STRING .)
    ,               reduce using rule 49 (string -> STRING .)
    ]               reduce using rule 49 (string -> STRING .)
    :               reduce using rule 49 (string -> STRING .)
    {               reduce using rule 49 (string -> STRING .)
    (               reduce using rule 49 (string -> STRING .)
    BREAK           reduce using rule 49 (string -> STRING .)
    CONTINUE        reduce using rule 49 (string -> STRING .)
    RETURN          reduce using rule 49 (string -> STRING .)
    PRINT           reduce using rule 49 (string -> STRING .)
    IF              reduce using rule 49 (string -> STRING .)
    WHILE           reduce using rule 49 (string -> STRING .)
    FOR             reduce using rule 49 (string -> STRING .)
    ID              reduce using rule 49 (string -> STRING .)
    FLOAT           reduce using rule 49 (string -> STRING .)
    INT             reduce using rule 49 (string -> STRING .)
    [               reduce using rule 49 (string -> STRING .)
    ZEROS           reduce using rule 49 (string -> STRING .)
    EYE             reduce using rule 49 (string -> STRING .)
    ONES            reduce using rule 49 (string -> STRING .)
    STRING          reduce using rule 49 (string -> STRING .)


state 42

    (4) instructions -> instructions instruction .

    ;               reduce using rule 4 (instructions -> instructions instruction .)
    {               reduce using rule 4 (instructions -> instructions instruction .)
    (               reduce using rule 4 (instructions -> instructions instruction .)
    -               reduce using rule 4 (instructions -> instructions instruction .)
    BREAK           reduce using rule 4 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 4 (instructions -> instructions instruction .)
    RETURN          reduce using rule 4 (instructions -> instructions instruction .)
    PRINT           reduce using rule 4 (instructions -> instructions instruction .)
    IF              reduce using rule 4 (instructions -> instructions instruction .)
    WHILE           reduce using rule 4 (instructions -> instructions instruction .)
    FOR             reduce using rule 4 (instructions -> instructions instruction .)
    ID              reduce using rule 4 (instructions -> instructions instruction .)
    FLOAT           reduce using rule 4 (instructions -> instructions instruction .)
    INT             reduce using rule 4 (instructions -> instructions instruction .)
    [               reduce using rule 4 (instructions -> instructions instruction .)
    ZEROS           reduce using rule 4 (instructions -> instructions instruction .)
    EYE             reduce using rule 4 (instructions -> instructions instruction .)
    ONES            reduce using rule 4 (instructions -> instructions instruction .)
    STRING          reduce using rule 4 (instructions -> instructions instruction .)
    $end            reduce using rule 4 (instructions -> instructions instruction .)
    }               reduce using rule 4 (instructions -> instructions instruction .)


state 43

    (8) instruction -> assignment ; .

    ;               reduce using rule 8 (instruction -> assignment ; .)
    {               reduce using rule 8 (instruction -> assignment ; .)
    (               reduce using rule 8 (instruction -> assignment ; .)
    -               reduce using rule 8 (instruction -> assignment ; .)
    BREAK           reduce using rule 8 (instruction -> assignment ; .)
    CONTINUE        reduce using rule 8 (instruction -> assignment ; .)
    RETURN          reduce using rule 8 (instruction -> assignment ; .)
    PRINT           reduce using rule 8 (instruction -> assignment ; .)
    IF              reduce using rule 8 (instruction -> assignment ; .)
    WHILE           reduce using rule 8 (instruction -> assignment ; .)
    FOR             reduce using rule 8 (instruction -> assignment ; .)
    ID              reduce using rule 8 (instruction -> assignment ; .)
    FLOAT           reduce using rule 8 (instruction -> assignment ; .)
    INT             reduce using rule 8 (instruction -> assignment ; .)
    [               reduce using rule 8 (instruction -> assignment ; .)
    ZEROS           reduce using rule 8 (instruction -> assignment ; .)
    EYE             reduce using rule 8 (instruction -> assignment ; .)
    ONES            reduce using rule 8 (instruction -> assignment ; .)
    STRING          reduce using rule 8 (instruction -> assignment ; .)
    $end            reduce using rule 8 (instruction -> assignment ; .)
    }               reduce using rule 8 (instruction -> assignment ; .)
    ELSE            reduce using rule 8 (instruction -> assignment ; .)


state 44

    (9) instruction -> relation ; .

    ;               reduce using rule 9 (instruction -> relation ; .)
    {               reduce using rule 9 (instruction -> relation ; .)
    (               reduce using rule 9 (instruction -> relation ; .)
    -               reduce using rule 9 (instruction -> relation ; .)
    BREAK           reduce using rule 9 (instruction -> relation ; .)
    CONTINUE        reduce using rule 9 (instruction -> relation ; .)
    RETURN          reduce using rule 9 (instruction -> relation ; .)
    PRINT           reduce using rule 9 (instruction -> relation ; .)
    IF              reduce using rule 9 (instruction -> relation ; .)
    WHILE           reduce using rule 9 (instruction -> relation ; .)
    FOR             reduce using rule 9 (instruction -> relation ; .)
    ID              reduce using rule 9 (instruction -> relation ; .)
    FLOAT           reduce using rule 9 (instruction -> relation ; .)
    INT             reduce using rule 9 (instruction -> relation ; .)
    [               reduce using rule 9 (instruction -> relation ; .)
    ZEROS           reduce using rule 9 (instruction -> relation ; .)
    EYE             reduce using rule 9 (instruction -> relation ; .)
    ONES            reduce using rule 9 (instruction -> relation ; .)
    STRING          reduce using rule 9 (instruction -> relation ; .)
    $end            reduce using rule 9 (instruction -> relation ; .)
    }               reduce using rule 9 (instruction -> relation ; .)
    ELSE            reduce using rule 9 (instruction -> relation ; .)


state 45

    (10) instruction -> expression ; .

    ;               reduce using rule 10 (instruction -> expression ; .)
    {               reduce using rule 10 (instruction -> expression ; .)
    (               reduce using rule 10 (instruction -> expression ; .)
    -               reduce using rule 10 (instruction -> expression ; .)
    BREAK           reduce using rule 10 (instruction -> expression ; .)
    CONTINUE        reduce using rule 10 (instruction -> expression ; .)
    RETURN          reduce using rule 10 (instruction -> expression ; .)
    PRINT           reduce using rule 10 (instruction -> expression ; .)
    IF              reduce using rule 10 (instruction -> expression ; .)
    WHILE           reduce using rule 10 (instruction -> expression ; .)
    FOR             reduce using rule 10 (instruction -> expression ; .)
    ID              reduce using rule 10 (instruction -> expression ; .)
    FLOAT           reduce using rule 10 (instruction -> expression ; .)
    INT             reduce using rule 10 (instruction -> expression ; .)
    [               reduce using rule 10 (instruction -> expression ; .)
    ZEROS           reduce using rule 10 (instruction -> expression ; .)
    EYE             reduce using rule 10 (instruction -> expression ; .)
    ONES            reduce using rule 10 (instruction -> expression ; .)
    STRING          reduce using rule 10 (instruction -> expression ; .)
    $end            reduce using rule 10 (instruction -> expression ; .)
    }               reduce using rule 10 (instruction -> expression ; .)
    ELSE            reduce using rule 10 (instruction -> expression ; .)


state 46

    (61) relation -> expression LT . expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    expression                     shift and go to state 89
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 47

    (62) relation -> expression GT . expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    expression                     shift and go to state 90
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 48

    (63) relation -> expression LE . expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    expression                     shift and go to state 91
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 49

    (64) relation -> expression GE . expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    expression                     shift and go to state 92
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 50

    (65) relation -> expression NE . expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    expression                     shift and go to state 93
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 51

    (66) relation -> expression EQ . expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    expression                     shift and go to state 94
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 52

    (34) expression -> expression + . expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    expression                     shift and go to state 95
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 53

    (35) expression -> expression - . expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    expression                     shift and go to state 96
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 54

    (36) expression -> expression * . expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    expression                     shift and go to state 97
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 55

    (37) expression -> expression / . expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    expression                     shift and go to state 98
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 56

    (38) expression -> expression DOTADD . expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    expression                     shift and go to state 99
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 57

    (39) expression -> expression DOTSUB . expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    expression                     shift and go to state 100
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 58

    (40) expression -> expression DOTMUL . expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    expression                     shift and go to state 101
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 59

    (41) expression -> expression DOTDIV . expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    expression                     shift and go to state 102
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 60

    (57) expression -> expression ' .

    ;               reduce using rule 57 (expression -> expression ' .)
    LT              reduce using rule 57 (expression -> expression ' .)
    GT              reduce using rule 57 (expression -> expression ' .)
    LE              reduce using rule 57 (expression -> expression ' .)
    GE              reduce using rule 57 (expression -> expression ' .)
    NE              reduce using rule 57 (expression -> expression ' .)
    EQ              reduce using rule 57 (expression -> expression ' .)
    +               reduce using rule 57 (expression -> expression ' .)
    -               reduce using rule 57 (expression -> expression ' .)
    *               reduce using rule 57 (expression -> expression ' .)
    /               reduce using rule 57 (expression -> expression ' .)
    DOTADD          reduce using rule 57 (expression -> expression ' .)
    DOTSUB          reduce using rule 57 (expression -> expression ' .)
    DOTMUL          reduce using rule 57 (expression -> expression ' .)
    DOTDIV          reduce using rule 57 (expression -> expression ' .)
    '               reduce using rule 57 (expression -> expression ' .)
    )               reduce using rule 57 (expression -> expression ' .)
    ,               reduce using rule 57 (expression -> expression ' .)
    ]               reduce using rule 57 (expression -> expression ' .)
    :               reduce using rule 57 (expression -> expression ' .)
    {               reduce using rule 57 (expression -> expression ' .)
    (               reduce using rule 57 (expression -> expression ' .)
    BREAK           reduce using rule 57 (expression -> expression ' .)
    CONTINUE        reduce using rule 57 (expression -> expression ' .)
    RETURN          reduce using rule 57 (expression -> expression ' .)
    PRINT           reduce using rule 57 (expression -> expression ' .)
    IF              reduce using rule 57 (expression -> expression ' .)
    WHILE           reduce using rule 57 (expression -> expression ' .)
    FOR             reduce using rule 57 (expression -> expression ' .)
    ID              reduce using rule 57 (expression -> expression ' .)
    FLOAT           reduce using rule 57 (expression -> expression ' .)
    INT             reduce using rule 57 (expression -> expression ' .)
    [               reduce using rule 57 (expression -> expression ' .)
    ZEROS           reduce using rule 57 (expression -> expression ' .)
    EYE             reduce using rule 57 (expression -> expression ' .)
    ONES            reduce using rule 57 (expression -> expression ' .)
    STRING          reduce using rule 57 (expression -> expression ' .)


state 61

    (11) instruction -> break ; .

    ;               reduce using rule 11 (instruction -> break ; .)
    {               reduce using rule 11 (instruction -> break ; .)
    (               reduce using rule 11 (instruction -> break ; .)
    -               reduce using rule 11 (instruction -> break ; .)
    BREAK           reduce using rule 11 (instruction -> break ; .)
    CONTINUE        reduce using rule 11 (instruction -> break ; .)
    RETURN          reduce using rule 11 (instruction -> break ; .)
    PRINT           reduce using rule 11 (instruction -> break ; .)
    IF              reduce using rule 11 (instruction -> break ; .)
    WHILE           reduce using rule 11 (instruction -> break ; .)
    FOR             reduce using rule 11 (instruction -> break ; .)
    ID              reduce using rule 11 (instruction -> break ; .)
    FLOAT           reduce using rule 11 (instruction -> break ; .)
    INT             reduce using rule 11 (instruction -> break ; .)
    [               reduce using rule 11 (instruction -> break ; .)
    ZEROS           reduce using rule 11 (instruction -> break ; .)
    EYE             reduce using rule 11 (instruction -> break ; .)
    ONES            reduce using rule 11 (instruction -> break ; .)
    STRING          reduce using rule 11 (instruction -> break ; .)
    $end            reduce using rule 11 (instruction -> break ; .)
    }               reduce using rule 11 (instruction -> break ; .)
    ELSE            reduce using rule 11 (instruction -> break ; .)


state 62

    (12) instruction -> continue ; .

    ;               reduce using rule 12 (instruction -> continue ; .)
    {               reduce using rule 12 (instruction -> continue ; .)
    (               reduce using rule 12 (instruction -> continue ; .)
    -               reduce using rule 12 (instruction -> continue ; .)
    BREAK           reduce using rule 12 (instruction -> continue ; .)
    CONTINUE        reduce using rule 12 (instruction -> continue ; .)
    RETURN          reduce using rule 12 (instruction -> continue ; .)
    PRINT           reduce using rule 12 (instruction -> continue ; .)
    IF              reduce using rule 12 (instruction -> continue ; .)
    WHILE           reduce using rule 12 (instruction -> continue ; .)
    FOR             reduce using rule 12 (instruction -> continue ; .)
    ID              reduce using rule 12 (instruction -> continue ; .)
    FLOAT           reduce using rule 12 (instruction -> continue ; .)
    INT             reduce using rule 12 (instruction -> continue ; .)
    [               reduce using rule 12 (instruction -> continue ; .)
    ZEROS           reduce using rule 12 (instruction -> continue ; .)
    EYE             reduce using rule 12 (instruction -> continue ; .)
    ONES            reduce using rule 12 (instruction -> continue ; .)
    STRING          reduce using rule 12 (instruction -> continue ; .)
    $end            reduce using rule 12 (instruction -> continue ; .)
    }               reduce using rule 12 (instruction -> continue ; .)
    ELSE            reduce using rule 12 (instruction -> continue ; .)


state 63

    (13) instruction -> return ; .

    ;               reduce using rule 13 (instruction -> return ; .)
    {               reduce using rule 13 (instruction -> return ; .)
    (               reduce using rule 13 (instruction -> return ; .)
    -               reduce using rule 13 (instruction -> return ; .)
    BREAK           reduce using rule 13 (instruction -> return ; .)
    CONTINUE        reduce using rule 13 (instruction -> return ; .)
    RETURN          reduce using rule 13 (instruction -> return ; .)
    PRINT           reduce using rule 13 (instruction -> return ; .)
    IF              reduce using rule 13 (instruction -> return ; .)
    WHILE           reduce using rule 13 (instruction -> return ; .)
    FOR             reduce using rule 13 (instruction -> return ; .)
    ID              reduce using rule 13 (instruction -> return ; .)
    FLOAT           reduce using rule 13 (instruction -> return ; .)
    INT             reduce using rule 13 (instruction -> return ; .)
    [               reduce using rule 13 (instruction -> return ; .)
    ZEROS           reduce using rule 13 (instruction -> return ; .)
    EYE             reduce using rule 13 (instruction -> return ; .)
    ONES            reduce using rule 13 (instruction -> return ; .)
    STRING          reduce using rule 13 (instruction -> return ; .)
    $end            reduce using rule 13 (instruction -> return ; .)
    }               reduce using rule 13 (instruction -> return ; .)
    ELSE            reduce using rule 13 (instruction -> return ; .)


state 64

    (14) instruction -> print ; .

    ;               reduce using rule 14 (instruction -> print ; .)
    {               reduce using rule 14 (instruction -> print ; .)
    (               reduce using rule 14 (instruction -> print ; .)
    -               reduce using rule 14 (instruction -> print ; .)
    BREAK           reduce using rule 14 (instruction -> print ; .)
    CONTINUE        reduce using rule 14 (instruction -> print ; .)
    RETURN          reduce using rule 14 (instruction -> print ; .)
    PRINT           reduce using rule 14 (instruction -> print ; .)
    IF              reduce using rule 14 (instruction -> print ; .)
    WHILE           reduce using rule 14 (instruction -> print ; .)
    FOR             reduce using rule 14 (instruction -> print ; .)
    ID              reduce using rule 14 (instruction -> print ; .)
    FLOAT           reduce using rule 14 (instruction -> print ; .)
    INT             reduce using rule 14 (instruction -> print ; .)
    [               reduce using rule 14 (instruction -> print ; .)
    ZEROS           reduce using rule 14 (instruction -> print ; .)
    EYE             reduce using rule 14 (instruction -> print ; .)
    ONES            reduce using rule 14 (instruction -> print ; .)
    STRING          reduce using rule 14 (instruction -> print ; .)
    $end            reduce using rule 14 (instruction -> print ; .)
    }               reduce using rule 14 (instruction -> print ; .)
    ELSE            reduce using rule 14 (instruction -> print ; .)


state 65

    (19) instruction_block -> { instructions . }
    (4) instructions -> instructions . instruction
    (7) instruction -> . instruction_block
    (8) instruction -> . assignment ;
    (9) instruction -> . relation ;
    (10) instruction -> . expression ;
    (11) instruction -> . break ;
    (12) instruction -> . continue ;
    (13) instruction -> . return ;
    (14) instruction -> . print ;
    (15) instruction -> . if
    (16) instruction -> . while
    (17) instruction -> . for
    (18) instruction -> . ;
    (19) instruction_block -> . { instructions }
    (25) assignment -> . var assign_op expression
    (26) assignment -> . ref assign_op expression
    (61) relation -> . expression LT expression
    (62) relation -> . expression GT expression
    (63) relation -> . expression LE expression
    (64) relation -> . expression GE expression
    (65) relation -> . expression NE expression
    (66) relation -> . expression EQ expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (20) break -> . BREAK
    (21) continue -> . CONTINUE
    (22) return -> . RETURN
    (23) return -> . RETURN expression
    (24) print -> . PRINT value_list
    (67) if -> . IF ( relation ) instruction
    (68) if -> . IF ( relation ) instruction ELSE instruction
    (69) while -> . WHILE ( relation ) instruction
    (71) for -> . FOR ID = range instruction
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    }               shift and go to state 103
    ;               shift and go to state 8
    {               shift and go to state 18
    (               shift and go to state 22
    -               shift and go to state 21
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 29
    PRINT           shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    instruction                    shift and go to state 42
    instruction_block              shift and go to state 6
    assignment                     shift and go to state 7
    relation                       shift and go to state 9
    expression                     shift and go to state 10
    break                          shift and go to state 11
    continue                       shift and go to state 12
    return                         shift and go to state 13
    print                          shift and go to state 14
    if                             shift and go to state 15
    while                          shift and go to state 16
    for                            shift and go to state 17
    var                            shift and go to state 19
    ref                            shift and go to state 20
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 66

    (25) assignment -> var assign_op . expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    var                            shift and go to state 74
    expression                     shift and go to state 104
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 67

    (27) assign_op -> = .

    (               reduce using rule 27 (assign_op -> = .)
    -               reduce using rule 27 (assign_op -> = .)
    ID              reduce using rule 27 (assign_op -> = .)
    FLOAT           reduce using rule 27 (assign_op -> = .)
    INT             reduce using rule 27 (assign_op -> = .)
    [               reduce using rule 27 (assign_op -> = .)
    ZEROS           reduce using rule 27 (assign_op -> = .)
    EYE             reduce using rule 27 (assign_op -> = .)
    ONES            reduce using rule 27 (assign_op -> = .)
    STRING          reduce using rule 27 (assign_op -> = .)


state 68

    (28) assign_op -> ADDASSIGN .

    (               reduce using rule 28 (assign_op -> ADDASSIGN .)
    -               reduce using rule 28 (assign_op -> ADDASSIGN .)
    ID              reduce using rule 28 (assign_op -> ADDASSIGN .)
    FLOAT           reduce using rule 28 (assign_op -> ADDASSIGN .)
    INT             reduce using rule 28 (assign_op -> ADDASSIGN .)
    [               reduce using rule 28 (assign_op -> ADDASSIGN .)
    ZEROS           reduce using rule 28 (assign_op -> ADDASSIGN .)
    EYE             reduce using rule 28 (assign_op -> ADDASSIGN .)
    ONES            reduce using rule 28 (assign_op -> ADDASSIGN .)
    STRING          reduce using rule 28 (assign_op -> ADDASSIGN .)


state 69

    (29) assign_op -> SUBASSIGN .

    (               reduce using rule 29 (assign_op -> SUBASSIGN .)
    -               reduce using rule 29 (assign_op -> SUBASSIGN .)
    ID              reduce using rule 29 (assign_op -> SUBASSIGN .)
    FLOAT           reduce using rule 29 (assign_op -> SUBASSIGN .)
    INT             reduce using rule 29 (assign_op -> SUBASSIGN .)
    [               reduce using rule 29 (assign_op -> SUBASSIGN .)
    ZEROS           reduce using rule 29 (assign_op -> SUBASSIGN .)
    EYE             reduce using rule 29 (assign_op -> SUBASSIGN .)
    ONES            reduce using rule 29 (assign_op -> SUBASSIGN .)
    STRING          reduce using rule 29 (assign_op -> SUBASSIGN .)


state 70

    (30) assign_op -> MULASSIGN .

    (               reduce using rule 30 (assign_op -> MULASSIGN .)
    -               reduce using rule 30 (assign_op -> MULASSIGN .)
    ID              reduce using rule 30 (assign_op -> MULASSIGN .)
    FLOAT           reduce using rule 30 (assign_op -> MULASSIGN .)
    INT             reduce using rule 30 (assign_op -> MULASSIGN .)
    [               reduce using rule 30 (assign_op -> MULASSIGN .)
    ZEROS           reduce using rule 30 (assign_op -> MULASSIGN .)
    EYE             reduce using rule 30 (assign_op -> MULASSIGN .)
    ONES            reduce using rule 30 (assign_op -> MULASSIGN .)
    STRING          reduce using rule 30 (assign_op -> MULASSIGN .)


state 71

    (31) assign_op -> DIVASSIGN .

    (               reduce using rule 31 (assign_op -> DIVASSIGN .)
    -               reduce using rule 31 (assign_op -> DIVASSIGN .)
    ID              reduce using rule 31 (assign_op -> DIVASSIGN .)
    FLOAT           reduce using rule 31 (assign_op -> DIVASSIGN .)
    INT             reduce using rule 31 (assign_op -> DIVASSIGN .)
    [               reduce using rule 31 (assign_op -> DIVASSIGN .)
    ZEROS           reduce using rule 31 (assign_op -> DIVASSIGN .)
    EYE             reduce using rule 31 (assign_op -> DIVASSIGN .)
    ONES            reduce using rule 31 (assign_op -> DIVASSIGN .)
    STRING          reduce using rule 31 (assign_op -> DIVASSIGN .)


state 72

    (26) assignment -> ref assign_op . expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    ref                            shift and go to state 75
    expression                     shift and go to state 105
    var                            shift and go to state 74
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 73

    (60) expression -> - expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . DOTADD expression
    (39) expression -> expression . DOTSUB expression
    (40) expression -> expression . DOTMUL expression
    (41) expression -> expression . DOTDIV expression
    (57) expression -> expression . '

    ;               reduce using rule 60 (expression -> - expression .)
    LT              reduce using rule 60 (expression -> - expression .)
    GT              reduce using rule 60 (expression -> - expression .)
    LE              reduce using rule 60 (expression -> - expression .)
    GE              reduce using rule 60 (expression -> - expression .)
    NE              reduce using rule 60 (expression -> - expression .)
    EQ              reduce using rule 60 (expression -> - expression .)
    +               reduce using rule 60 (expression -> - expression .)
    -               reduce using rule 60 (expression -> - expression .)
    *               reduce using rule 60 (expression -> - expression .)
    /               reduce using rule 60 (expression -> - expression .)
    DOTADD          reduce using rule 60 (expression -> - expression .)
    DOTSUB          reduce using rule 60 (expression -> - expression .)
    DOTMUL          reduce using rule 60 (expression -> - expression .)
    DOTDIV          reduce using rule 60 (expression -> - expression .)
    )               reduce using rule 60 (expression -> - expression .)
    ,               reduce using rule 60 (expression -> - expression .)
    ]               reduce using rule 60 (expression -> - expression .)
    :               reduce using rule 60 (expression -> - expression .)
    {               reduce using rule 60 (expression -> - expression .)
    (               reduce using rule 60 (expression -> - expression .)
    BREAK           reduce using rule 60 (expression -> - expression .)
    CONTINUE        reduce using rule 60 (expression -> - expression .)
    RETURN          reduce using rule 60 (expression -> - expression .)
    PRINT           reduce using rule 60 (expression -> - expression .)
    IF              reduce using rule 60 (expression -> - expression .)
    WHILE           reduce using rule 60 (expression -> - expression .)
    FOR             reduce using rule 60 (expression -> - expression .)
    ID              reduce using rule 60 (expression -> - expression .)
    FLOAT           reduce using rule 60 (expression -> - expression .)
    INT             reduce using rule 60 (expression -> - expression .)
    [               reduce using rule 60 (expression -> - expression .)
    ZEROS           reduce using rule 60 (expression -> - expression .)
    EYE             reduce using rule 60 (expression -> - expression .)
    ONES            reduce using rule 60 (expression -> - expression .)
    STRING          reduce using rule 60 (expression -> - expression .)
    '               shift and go to state 60

  ! '               [ reduce using rule 60 (expression -> - expression .) ]
  ! +               [ shift and go to state 52 ]
  ! -               [ shift and go to state 53 ]
  ! *               [ shift and go to state 54 ]
  ! /               [ shift and go to state 55 ]
  ! DOTADD          [ shift and go to state 56 ]
  ! DOTSUB          [ shift and go to state 57 ]
  ! DOTMUL          [ shift and go to state 58 ]
  ! DOTDIV          [ shift and go to state 59 ]


state 74

    (43) expression -> var .

    +               reduce using rule 43 (expression -> var .)
    -               reduce using rule 43 (expression -> var .)
    *               reduce using rule 43 (expression -> var .)
    /               reduce using rule 43 (expression -> var .)
    DOTADD          reduce using rule 43 (expression -> var .)
    DOTSUB          reduce using rule 43 (expression -> var .)
    DOTMUL          reduce using rule 43 (expression -> var .)
    DOTDIV          reduce using rule 43 (expression -> var .)
    '               reduce using rule 43 (expression -> var .)
    ;               reduce using rule 43 (expression -> var .)
    LT              reduce using rule 43 (expression -> var .)
    GT              reduce using rule 43 (expression -> var .)
    LE              reduce using rule 43 (expression -> var .)
    GE              reduce using rule 43 (expression -> var .)
    NE              reduce using rule 43 (expression -> var .)
    EQ              reduce using rule 43 (expression -> var .)
    )               reduce using rule 43 (expression -> var .)
    ,               reduce using rule 43 (expression -> var .)
    ]               reduce using rule 43 (expression -> var .)
    :               reduce using rule 43 (expression -> var .)
    {               reduce using rule 43 (expression -> var .)
    (               reduce using rule 43 (expression -> var .)
    BREAK           reduce using rule 43 (expression -> var .)
    CONTINUE        reduce using rule 43 (expression -> var .)
    RETURN          reduce using rule 43 (expression -> var .)
    PRINT           reduce using rule 43 (expression -> var .)
    IF              reduce using rule 43 (expression -> var .)
    WHILE           reduce using rule 43 (expression -> var .)
    FOR             reduce using rule 43 (expression -> var .)
    ID              reduce using rule 43 (expression -> var .)
    FLOAT           reduce using rule 43 (expression -> var .)
    INT             reduce using rule 43 (expression -> var .)
    [               reduce using rule 43 (expression -> var .)
    ZEROS           reduce using rule 43 (expression -> var .)
    EYE             reduce using rule 43 (expression -> var .)
    ONES            reduce using rule 43 (expression -> var .)
    STRING          reduce using rule 43 (expression -> var .)


state 75

    (44) expression -> ref .

    +               reduce using rule 44 (expression -> ref .)
    -               reduce using rule 44 (expression -> ref .)
    *               reduce using rule 44 (expression -> ref .)
    /               reduce using rule 44 (expression -> ref .)
    DOTADD          reduce using rule 44 (expression -> ref .)
    DOTSUB          reduce using rule 44 (expression -> ref .)
    DOTMUL          reduce using rule 44 (expression -> ref .)
    DOTDIV          reduce using rule 44 (expression -> ref .)
    '               reduce using rule 44 (expression -> ref .)
    ;               reduce using rule 44 (expression -> ref .)
    LT              reduce using rule 44 (expression -> ref .)
    GT              reduce using rule 44 (expression -> ref .)
    LE              reduce using rule 44 (expression -> ref .)
    GE              reduce using rule 44 (expression -> ref .)
    NE              reduce using rule 44 (expression -> ref .)
    EQ              reduce using rule 44 (expression -> ref .)
    )               reduce using rule 44 (expression -> ref .)
    ,               reduce using rule 44 (expression -> ref .)
    ]               reduce using rule 44 (expression -> ref .)
    :               reduce using rule 44 (expression -> ref .)
    {               reduce using rule 44 (expression -> ref .)
    (               reduce using rule 44 (expression -> ref .)
    BREAK           reduce using rule 44 (expression -> ref .)
    CONTINUE        reduce using rule 44 (expression -> ref .)
    RETURN          reduce using rule 44 (expression -> ref .)
    PRINT           reduce using rule 44 (expression -> ref .)
    IF              reduce using rule 44 (expression -> ref .)
    WHILE           reduce using rule 44 (expression -> ref .)
    FOR             reduce using rule 44 (expression -> ref .)
    ID              reduce using rule 44 (expression -> ref .)
    FLOAT           reduce using rule 44 (expression -> ref .)
    INT             reduce using rule 44 (expression -> ref .)
    [               reduce using rule 44 (expression -> ref .)
    ZEROS           reduce using rule 44 (expression -> ref .)
    EYE             reduce using rule 44 (expression -> ref .)
    ONES            reduce using rule 44 (expression -> ref .)
    STRING          reduce using rule 44 (expression -> ref .)


state 76

    (42) expression -> ( expression . )
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . DOTADD expression
    (39) expression -> expression . DOTSUB expression
    (40) expression -> expression . DOTMUL expression
    (41) expression -> expression . DOTDIV expression
    (57) expression -> expression . '

    )               shift and go to state 106
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60


state 77

    (23) return -> RETURN expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . DOTADD expression
    (39) expression -> expression . DOTSUB expression
    (40) expression -> expression . DOTMUL expression
    (41) expression -> expression . DOTDIV expression
    (57) expression -> expression . '

    ;               reduce using rule 23 (return -> RETURN expression .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60


state 78

    (24) print -> PRINT value_list .
    (55) value_list -> value_list . , expression

    ;               reduce using rule 24 (print -> PRINT value_list .)
    ,               shift and go to state 107


state 79

    (56) value_list -> expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . DOTADD expression
    (39) expression -> expression . DOTSUB expression
    (40) expression -> expression . DOTMUL expression
    (41) expression -> expression . DOTDIV expression
    (57) expression -> expression . '

    ,               reduce using rule 56 (value_list -> expression .)
    ;               reduce using rule 56 (value_list -> expression .)
    ]               reduce using rule 56 (value_list -> expression .)
    )               reduce using rule 56 (value_list -> expression .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60


state 80

    (67) if -> IF ( . relation ) instruction
    (68) if -> IF ( . relation ) instruction ELSE instruction
    (61) relation -> . expression LT expression
    (62) relation -> . expression GT expression
    (63) relation -> . expression LE expression
    (64) relation -> . expression GE expression
    (65) relation -> . expression NE expression
    (66) relation -> . expression EQ expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    relation                       shift and go to state 108
    expression                     shift and go to state 109
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 81

    (69) while -> WHILE ( . relation ) instruction
    (61) relation -> . expression LT expression
    (62) relation -> . expression GT expression
    (63) relation -> . expression LE expression
    (64) relation -> . expression GE expression
    (65) relation -> . expression NE expression
    (66) relation -> . expression EQ expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    relation                       shift and go to state 110
    expression                     shift and go to state 109
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 82

    (71) for -> FOR ID . = range instruction

    =               shift and go to state 111


state 83

    (33) ref -> ID [ . value_list ]
    (55) value_list -> . value_list , expression
    (56) value_list -> . expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    value_list                     shift and go to state 112
    expression                     shift and go to state 79
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 84

    (53) list -> [ value_list . ]
    (55) value_list -> value_list . , expression

    ]               shift and go to state 113
    ,               shift and go to state 107


state 85

    (54) list -> [ ] .

    ;               reduce using rule 54 (list -> [ ] .)
    LT              reduce using rule 54 (list -> [ ] .)
    GT              reduce using rule 54 (list -> [ ] .)
    LE              reduce using rule 54 (list -> [ ] .)
    GE              reduce using rule 54 (list -> [ ] .)
    NE              reduce using rule 54 (list -> [ ] .)
    EQ              reduce using rule 54 (list -> [ ] .)
    +               reduce using rule 54 (list -> [ ] .)
    -               reduce using rule 54 (list -> [ ] .)
    *               reduce using rule 54 (list -> [ ] .)
    /               reduce using rule 54 (list -> [ ] .)
    DOTADD          reduce using rule 54 (list -> [ ] .)
    DOTSUB          reduce using rule 54 (list -> [ ] .)
    DOTMUL          reduce using rule 54 (list -> [ ] .)
    DOTDIV          reduce using rule 54 (list -> [ ] .)
    '               reduce using rule 54 (list -> [ ] .)
    )               reduce using rule 54 (list -> [ ] .)
    ,               reduce using rule 54 (list -> [ ] .)
    ]               reduce using rule 54 (list -> [ ] .)
    :               reduce using rule 54 (list -> [ ] .)
    {               reduce using rule 54 (list -> [ ] .)
    (               reduce using rule 54 (list -> [ ] .)
    BREAK           reduce using rule 54 (list -> [ ] .)
    CONTINUE        reduce using rule 54 (list -> [ ] .)
    RETURN          reduce using rule 54 (list -> [ ] .)
    PRINT           reduce using rule 54 (list -> [ ] .)
    IF              reduce using rule 54 (list -> [ ] .)
    WHILE           reduce using rule 54 (list -> [ ] .)
    FOR             reduce using rule 54 (list -> [ ] .)
    ID              reduce using rule 54 (list -> [ ] .)
    FLOAT           reduce using rule 54 (list -> [ ] .)
    INT             reduce using rule 54 (list -> [ ] .)
    [               reduce using rule 54 (list -> [ ] .)
    ZEROS           reduce using rule 54 (list -> [ ] .)
    EYE             reduce using rule 54 (list -> [ ] .)
    ONES            reduce using rule 54 (list -> [ ] .)
    STRING          reduce using rule 54 (list -> [ ] .)


state 86

    (50) function -> ZEROS ( . value_list )
    (55) value_list -> . value_list , expression
    (56) value_list -> . expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    value_list                     shift and go to state 114
    expression                     shift and go to state 79
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 87

    (51) function -> EYE ( . value_list )
    (55) value_list -> . value_list , expression
    (56) value_list -> . expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    value_list                     shift and go to state 115
    expression                     shift and go to state 79
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 88

    (52) function -> ONES ( . value_list )
    (55) value_list -> . value_list , expression
    (56) value_list -> . expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    value_list                     shift and go to state 116
    expression                     shift and go to state 79
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 89

    (61) relation -> expression LT expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . DOTADD expression
    (39) expression -> expression . DOTSUB expression
    (40) expression -> expression . DOTMUL expression
    (41) expression -> expression . DOTDIV expression
    (57) expression -> expression . '

    ;               reduce using rule 61 (relation -> expression LT expression .)
    )               reduce using rule 61 (relation -> expression LT expression .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60


state 90

    (62) relation -> expression GT expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . DOTADD expression
    (39) expression -> expression . DOTSUB expression
    (40) expression -> expression . DOTMUL expression
    (41) expression -> expression . DOTDIV expression
    (57) expression -> expression . '

    ;               reduce using rule 62 (relation -> expression GT expression .)
    )               reduce using rule 62 (relation -> expression GT expression .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60


state 91

    (63) relation -> expression LE expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . DOTADD expression
    (39) expression -> expression . DOTSUB expression
    (40) expression -> expression . DOTMUL expression
    (41) expression -> expression . DOTDIV expression
    (57) expression -> expression . '

    ;               reduce using rule 63 (relation -> expression LE expression .)
    )               reduce using rule 63 (relation -> expression LE expression .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60


state 92

    (64) relation -> expression GE expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . DOTADD expression
    (39) expression -> expression . DOTSUB expression
    (40) expression -> expression . DOTMUL expression
    (41) expression -> expression . DOTDIV expression
    (57) expression -> expression . '

    ;               reduce using rule 64 (relation -> expression GE expression .)
    )               reduce using rule 64 (relation -> expression GE expression .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60


state 93

    (65) relation -> expression NE expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . DOTADD expression
    (39) expression -> expression . DOTSUB expression
    (40) expression -> expression . DOTMUL expression
    (41) expression -> expression . DOTDIV expression
    (57) expression -> expression . '

    ;               reduce using rule 65 (relation -> expression NE expression .)
    )               reduce using rule 65 (relation -> expression NE expression .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60


state 94

    (66) relation -> expression EQ expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . DOTADD expression
    (39) expression -> expression . DOTSUB expression
    (40) expression -> expression . DOTMUL expression
    (41) expression -> expression . DOTDIV expression
    (57) expression -> expression . '

    ;               reduce using rule 66 (relation -> expression EQ expression .)
    )               reduce using rule 66 (relation -> expression EQ expression .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60


state 95

    (34) expression -> expression + expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . DOTADD expression
    (39) expression -> expression . DOTSUB expression
    (40) expression -> expression . DOTMUL expression
    (41) expression -> expression . DOTDIV expression
    (57) expression -> expression . '

    ;               reduce using rule 34 (expression -> expression + expression .)
    LT              reduce using rule 34 (expression -> expression + expression .)
    GT              reduce using rule 34 (expression -> expression + expression .)
    LE              reduce using rule 34 (expression -> expression + expression .)
    GE              reduce using rule 34 (expression -> expression + expression .)
    NE              reduce using rule 34 (expression -> expression + expression .)
    EQ              reduce using rule 34 (expression -> expression + expression .)
    +               reduce using rule 34 (expression -> expression + expression .)
    -               reduce using rule 34 (expression -> expression + expression .)
    )               reduce using rule 34 (expression -> expression + expression .)
    ,               reduce using rule 34 (expression -> expression + expression .)
    ]               reduce using rule 34 (expression -> expression + expression .)
    :               reduce using rule 34 (expression -> expression + expression .)
    {               reduce using rule 34 (expression -> expression + expression .)
    (               reduce using rule 34 (expression -> expression + expression .)
    BREAK           reduce using rule 34 (expression -> expression + expression .)
    CONTINUE        reduce using rule 34 (expression -> expression + expression .)
    RETURN          reduce using rule 34 (expression -> expression + expression .)
    PRINT           reduce using rule 34 (expression -> expression + expression .)
    IF              reduce using rule 34 (expression -> expression + expression .)
    WHILE           reduce using rule 34 (expression -> expression + expression .)
    FOR             reduce using rule 34 (expression -> expression + expression .)
    ID              reduce using rule 34 (expression -> expression + expression .)
    FLOAT           reduce using rule 34 (expression -> expression + expression .)
    INT             reduce using rule 34 (expression -> expression + expression .)
    [               reduce using rule 34 (expression -> expression + expression .)
    ZEROS           reduce using rule 34 (expression -> expression + expression .)
    EYE             reduce using rule 34 (expression -> expression + expression .)
    ONES            reduce using rule 34 (expression -> expression + expression .)
    STRING          reduce using rule 34 (expression -> expression + expression .)
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60

  ! *               [ reduce using rule 34 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 34 (expression -> expression + expression .) ]
  ! DOTADD          [ reduce using rule 34 (expression -> expression + expression .) ]
  ! DOTSUB          [ reduce using rule 34 (expression -> expression + expression .) ]
  ! DOTMUL          [ reduce using rule 34 (expression -> expression + expression .) ]
  ! DOTDIV          [ reduce using rule 34 (expression -> expression + expression .) ]
  ! '               [ reduce using rule 34 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 52 ]
  ! -               [ shift and go to state 53 ]


state 96

    (35) expression -> expression - expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . DOTADD expression
    (39) expression -> expression . DOTSUB expression
    (40) expression -> expression . DOTMUL expression
    (41) expression -> expression . DOTDIV expression
    (57) expression -> expression . '

    ;               reduce using rule 35 (expression -> expression - expression .)
    LT              reduce using rule 35 (expression -> expression - expression .)
    GT              reduce using rule 35 (expression -> expression - expression .)
    LE              reduce using rule 35 (expression -> expression - expression .)
    GE              reduce using rule 35 (expression -> expression - expression .)
    NE              reduce using rule 35 (expression -> expression - expression .)
    EQ              reduce using rule 35 (expression -> expression - expression .)
    +               reduce using rule 35 (expression -> expression - expression .)
    -               reduce using rule 35 (expression -> expression - expression .)
    )               reduce using rule 35 (expression -> expression - expression .)
    ,               reduce using rule 35 (expression -> expression - expression .)
    ]               reduce using rule 35 (expression -> expression - expression .)
    :               reduce using rule 35 (expression -> expression - expression .)
    {               reduce using rule 35 (expression -> expression - expression .)
    (               reduce using rule 35 (expression -> expression - expression .)
    BREAK           reduce using rule 35 (expression -> expression - expression .)
    CONTINUE        reduce using rule 35 (expression -> expression - expression .)
    RETURN          reduce using rule 35 (expression -> expression - expression .)
    PRINT           reduce using rule 35 (expression -> expression - expression .)
    IF              reduce using rule 35 (expression -> expression - expression .)
    WHILE           reduce using rule 35 (expression -> expression - expression .)
    FOR             reduce using rule 35 (expression -> expression - expression .)
    ID              reduce using rule 35 (expression -> expression - expression .)
    FLOAT           reduce using rule 35 (expression -> expression - expression .)
    INT             reduce using rule 35 (expression -> expression - expression .)
    [               reduce using rule 35 (expression -> expression - expression .)
    ZEROS           reduce using rule 35 (expression -> expression - expression .)
    EYE             reduce using rule 35 (expression -> expression - expression .)
    ONES            reduce using rule 35 (expression -> expression - expression .)
    STRING          reduce using rule 35 (expression -> expression - expression .)
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60

  ! *               [ reduce using rule 35 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 35 (expression -> expression - expression .) ]
  ! DOTADD          [ reduce using rule 35 (expression -> expression - expression .) ]
  ! DOTSUB          [ reduce using rule 35 (expression -> expression - expression .) ]
  ! DOTMUL          [ reduce using rule 35 (expression -> expression - expression .) ]
  ! DOTDIV          [ reduce using rule 35 (expression -> expression - expression .) ]
  ! '               [ reduce using rule 35 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 52 ]
  ! -               [ shift and go to state 53 ]


state 97

    (36) expression -> expression * expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . DOTADD expression
    (39) expression -> expression . DOTSUB expression
    (40) expression -> expression . DOTMUL expression
    (41) expression -> expression . DOTDIV expression
    (57) expression -> expression . '

    ;               reduce using rule 36 (expression -> expression * expression .)
    LT              reduce using rule 36 (expression -> expression * expression .)
    GT              reduce using rule 36 (expression -> expression * expression .)
    LE              reduce using rule 36 (expression -> expression * expression .)
    GE              reduce using rule 36 (expression -> expression * expression .)
    NE              reduce using rule 36 (expression -> expression * expression .)
    EQ              reduce using rule 36 (expression -> expression * expression .)
    +               reduce using rule 36 (expression -> expression * expression .)
    -               reduce using rule 36 (expression -> expression * expression .)
    *               reduce using rule 36 (expression -> expression * expression .)
    /               reduce using rule 36 (expression -> expression * expression .)
    )               reduce using rule 36 (expression -> expression * expression .)
    ,               reduce using rule 36 (expression -> expression * expression .)
    ]               reduce using rule 36 (expression -> expression * expression .)
    :               reduce using rule 36 (expression -> expression * expression .)
    {               reduce using rule 36 (expression -> expression * expression .)
    (               reduce using rule 36 (expression -> expression * expression .)
    BREAK           reduce using rule 36 (expression -> expression * expression .)
    CONTINUE        reduce using rule 36 (expression -> expression * expression .)
    RETURN          reduce using rule 36 (expression -> expression * expression .)
    PRINT           reduce using rule 36 (expression -> expression * expression .)
    IF              reduce using rule 36 (expression -> expression * expression .)
    WHILE           reduce using rule 36 (expression -> expression * expression .)
    FOR             reduce using rule 36 (expression -> expression * expression .)
    ID              reduce using rule 36 (expression -> expression * expression .)
    FLOAT           reduce using rule 36 (expression -> expression * expression .)
    INT             reduce using rule 36 (expression -> expression * expression .)
    [               reduce using rule 36 (expression -> expression * expression .)
    ZEROS           reduce using rule 36 (expression -> expression * expression .)
    EYE             reduce using rule 36 (expression -> expression * expression .)
    ONES            reduce using rule 36 (expression -> expression * expression .)
    STRING          reduce using rule 36 (expression -> expression * expression .)
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60

  ! DOTADD          [ reduce using rule 36 (expression -> expression * expression .) ]
  ! DOTSUB          [ reduce using rule 36 (expression -> expression * expression .) ]
  ! DOTMUL          [ reduce using rule 36 (expression -> expression * expression .) ]
  ! DOTDIV          [ reduce using rule 36 (expression -> expression * expression .) ]
  ! '               [ reduce using rule 36 (expression -> expression * expression .) ]
  ! +               [ shift and go to state 52 ]
  ! -               [ shift and go to state 53 ]
  ! *               [ shift and go to state 54 ]
  ! /               [ shift and go to state 55 ]


state 98

    (37) expression -> expression / expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . DOTADD expression
    (39) expression -> expression . DOTSUB expression
    (40) expression -> expression . DOTMUL expression
    (41) expression -> expression . DOTDIV expression
    (57) expression -> expression . '

    ;               reduce using rule 37 (expression -> expression / expression .)
    LT              reduce using rule 37 (expression -> expression / expression .)
    GT              reduce using rule 37 (expression -> expression / expression .)
    LE              reduce using rule 37 (expression -> expression / expression .)
    GE              reduce using rule 37 (expression -> expression / expression .)
    NE              reduce using rule 37 (expression -> expression / expression .)
    EQ              reduce using rule 37 (expression -> expression / expression .)
    +               reduce using rule 37 (expression -> expression / expression .)
    -               reduce using rule 37 (expression -> expression / expression .)
    *               reduce using rule 37 (expression -> expression / expression .)
    /               reduce using rule 37 (expression -> expression / expression .)
    )               reduce using rule 37 (expression -> expression / expression .)
    ,               reduce using rule 37 (expression -> expression / expression .)
    ]               reduce using rule 37 (expression -> expression / expression .)
    :               reduce using rule 37 (expression -> expression / expression .)
    {               reduce using rule 37 (expression -> expression / expression .)
    (               reduce using rule 37 (expression -> expression / expression .)
    BREAK           reduce using rule 37 (expression -> expression / expression .)
    CONTINUE        reduce using rule 37 (expression -> expression / expression .)
    RETURN          reduce using rule 37 (expression -> expression / expression .)
    PRINT           reduce using rule 37 (expression -> expression / expression .)
    IF              reduce using rule 37 (expression -> expression / expression .)
    WHILE           reduce using rule 37 (expression -> expression / expression .)
    FOR             reduce using rule 37 (expression -> expression / expression .)
    ID              reduce using rule 37 (expression -> expression / expression .)
    FLOAT           reduce using rule 37 (expression -> expression / expression .)
    INT             reduce using rule 37 (expression -> expression / expression .)
    [               reduce using rule 37 (expression -> expression / expression .)
    ZEROS           reduce using rule 37 (expression -> expression / expression .)
    EYE             reduce using rule 37 (expression -> expression / expression .)
    ONES            reduce using rule 37 (expression -> expression / expression .)
    STRING          reduce using rule 37 (expression -> expression / expression .)
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60

  ! DOTADD          [ reduce using rule 37 (expression -> expression / expression .) ]
  ! DOTSUB          [ reduce using rule 37 (expression -> expression / expression .) ]
  ! DOTMUL          [ reduce using rule 37 (expression -> expression / expression .) ]
  ! DOTDIV          [ reduce using rule 37 (expression -> expression / expression .) ]
  ! '               [ reduce using rule 37 (expression -> expression / expression .) ]
  ! +               [ shift and go to state 52 ]
  ! -               [ shift and go to state 53 ]
  ! *               [ shift and go to state 54 ]
  ! /               [ shift and go to state 55 ]


state 99

    (38) expression -> expression DOTADD expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . DOTADD expression
    (39) expression -> expression . DOTSUB expression
    (40) expression -> expression . DOTMUL expression
    (41) expression -> expression . DOTDIV expression
    (57) expression -> expression . '

    ;               reduce using rule 38 (expression -> expression DOTADD expression .)
    LT              reduce using rule 38 (expression -> expression DOTADD expression .)
    GT              reduce using rule 38 (expression -> expression DOTADD expression .)
    LE              reduce using rule 38 (expression -> expression DOTADD expression .)
    GE              reduce using rule 38 (expression -> expression DOTADD expression .)
    NE              reduce using rule 38 (expression -> expression DOTADD expression .)
    EQ              reduce using rule 38 (expression -> expression DOTADD expression .)
    +               reduce using rule 38 (expression -> expression DOTADD expression .)
    -               reduce using rule 38 (expression -> expression DOTADD expression .)
    *               reduce using rule 38 (expression -> expression DOTADD expression .)
    /               reduce using rule 38 (expression -> expression DOTADD expression .)
    DOTADD          reduce using rule 38 (expression -> expression DOTADD expression .)
    DOTSUB          reduce using rule 38 (expression -> expression DOTADD expression .)
    )               reduce using rule 38 (expression -> expression DOTADD expression .)
    ,               reduce using rule 38 (expression -> expression DOTADD expression .)
    ]               reduce using rule 38 (expression -> expression DOTADD expression .)
    :               reduce using rule 38 (expression -> expression DOTADD expression .)
    {               reduce using rule 38 (expression -> expression DOTADD expression .)
    (               reduce using rule 38 (expression -> expression DOTADD expression .)
    BREAK           reduce using rule 38 (expression -> expression DOTADD expression .)
    CONTINUE        reduce using rule 38 (expression -> expression DOTADD expression .)
    RETURN          reduce using rule 38 (expression -> expression DOTADD expression .)
    PRINT           reduce using rule 38 (expression -> expression DOTADD expression .)
    IF              reduce using rule 38 (expression -> expression DOTADD expression .)
    WHILE           reduce using rule 38 (expression -> expression DOTADD expression .)
    FOR             reduce using rule 38 (expression -> expression DOTADD expression .)
    ID              reduce using rule 38 (expression -> expression DOTADD expression .)
    FLOAT           reduce using rule 38 (expression -> expression DOTADD expression .)
    INT             reduce using rule 38 (expression -> expression DOTADD expression .)
    [               reduce using rule 38 (expression -> expression DOTADD expression .)
    ZEROS           reduce using rule 38 (expression -> expression DOTADD expression .)
    EYE             reduce using rule 38 (expression -> expression DOTADD expression .)
    ONES            reduce using rule 38 (expression -> expression DOTADD expression .)
    STRING          reduce using rule 38 (expression -> expression DOTADD expression .)
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60

  ! DOTMUL          [ reduce using rule 38 (expression -> expression DOTADD expression .) ]
  ! DOTDIV          [ reduce using rule 38 (expression -> expression DOTADD expression .) ]
  ! '               [ reduce using rule 38 (expression -> expression DOTADD expression .) ]
  ! +               [ shift and go to state 52 ]
  ! -               [ shift and go to state 53 ]
  ! *               [ shift and go to state 54 ]
  ! /               [ shift and go to state 55 ]
  ! DOTADD          [ shift and go to state 56 ]
  ! DOTSUB          [ shift and go to state 57 ]


state 100

    (39) expression -> expression DOTSUB expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . DOTADD expression
    (39) expression -> expression . DOTSUB expression
    (40) expression -> expression . DOTMUL expression
    (41) expression -> expression . DOTDIV expression
    (57) expression -> expression . '

    ;               reduce using rule 39 (expression -> expression DOTSUB expression .)
    LT              reduce using rule 39 (expression -> expression DOTSUB expression .)
    GT              reduce using rule 39 (expression -> expression DOTSUB expression .)
    LE              reduce using rule 39 (expression -> expression DOTSUB expression .)
    GE              reduce using rule 39 (expression -> expression DOTSUB expression .)
    NE              reduce using rule 39 (expression -> expression DOTSUB expression .)
    EQ              reduce using rule 39 (expression -> expression DOTSUB expression .)
    +               reduce using rule 39 (expression -> expression DOTSUB expression .)
    -               reduce using rule 39 (expression -> expression DOTSUB expression .)
    *               reduce using rule 39 (expression -> expression DOTSUB expression .)
    /               reduce using rule 39 (expression -> expression DOTSUB expression .)
    DOTADD          reduce using rule 39 (expression -> expression DOTSUB expression .)
    DOTSUB          reduce using rule 39 (expression -> expression DOTSUB expression .)
    )               reduce using rule 39 (expression -> expression DOTSUB expression .)
    ,               reduce using rule 39 (expression -> expression DOTSUB expression .)
    ]               reduce using rule 39 (expression -> expression DOTSUB expression .)
    :               reduce using rule 39 (expression -> expression DOTSUB expression .)
    {               reduce using rule 39 (expression -> expression DOTSUB expression .)
    (               reduce using rule 39 (expression -> expression DOTSUB expression .)
    BREAK           reduce using rule 39 (expression -> expression DOTSUB expression .)
    CONTINUE        reduce using rule 39 (expression -> expression DOTSUB expression .)
    RETURN          reduce using rule 39 (expression -> expression DOTSUB expression .)
    PRINT           reduce using rule 39 (expression -> expression DOTSUB expression .)
    IF              reduce using rule 39 (expression -> expression DOTSUB expression .)
    WHILE           reduce using rule 39 (expression -> expression DOTSUB expression .)
    FOR             reduce using rule 39 (expression -> expression DOTSUB expression .)
    ID              reduce using rule 39 (expression -> expression DOTSUB expression .)
    FLOAT           reduce using rule 39 (expression -> expression DOTSUB expression .)
    INT             reduce using rule 39 (expression -> expression DOTSUB expression .)
    [               reduce using rule 39 (expression -> expression DOTSUB expression .)
    ZEROS           reduce using rule 39 (expression -> expression DOTSUB expression .)
    EYE             reduce using rule 39 (expression -> expression DOTSUB expression .)
    ONES            reduce using rule 39 (expression -> expression DOTSUB expression .)
    STRING          reduce using rule 39 (expression -> expression DOTSUB expression .)
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60

  ! DOTMUL          [ reduce using rule 39 (expression -> expression DOTSUB expression .) ]
  ! DOTDIV          [ reduce using rule 39 (expression -> expression DOTSUB expression .) ]
  ! '               [ reduce using rule 39 (expression -> expression DOTSUB expression .) ]
  ! +               [ shift and go to state 52 ]
  ! -               [ shift and go to state 53 ]
  ! *               [ shift and go to state 54 ]
  ! /               [ shift and go to state 55 ]
  ! DOTADD          [ shift and go to state 56 ]
  ! DOTSUB          [ shift and go to state 57 ]


state 101

    (40) expression -> expression DOTMUL expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . DOTADD expression
    (39) expression -> expression . DOTSUB expression
    (40) expression -> expression . DOTMUL expression
    (41) expression -> expression . DOTDIV expression
    (57) expression -> expression . '

    ;               reduce using rule 40 (expression -> expression DOTMUL expression .)
    LT              reduce using rule 40 (expression -> expression DOTMUL expression .)
    GT              reduce using rule 40 (expression -> expression DOTMUL expression .)
    LE              reduce using rule 40 (expression -> expression DOTMUL expression .)
    GE              reduce using rule 40 (expression -> expression DOTMUL expression .)
    NE              reduce using rule 40 (expression -> expression DOTMUL expression .)
    EQ              reduce using rule 40 (expression -> expression DOTMUL expression .)
    +               reduce using rule 40 (expression -> expression DOTMUL expression .)
    -               reduce using rule 40 (expression -> expression DOTMUL expression .)
    *               reduce using rule 40 (expression -> expression DOTMUL expression .)
    /               reduce using rule 40 (expression -> expression DOTMUL expression .)
    DOTADD          reduce using rule 40 (expression -> expression DOTMUL expression .)
    DOTSUB          reduce using rule 40 (expression -> expression DOTMUL expression .)
    DOTMUL          reduce using rule 40 (expression -> expression DOTMUL expression .)
    DOTDIV          reduce using rule 40 (expression -> expression DOTMUL expression .)
    )               reduce using rule 40 (expression -> expression DOTMUL expression .)
    ,               reduce using rule 40 (expression -> expression DOTMUL expression .)
    ]               reduce using rule 40 (expression -> expression DOTMUL expression .)
    :               reduce using rule 40 (expression -> expression DOTMUL expression .)
    {               reduce using rule 40 (expression -> expression DOTMUL expression .)
    (               reduce using rule 40 (expression -> expression DOTMUL expression .)
    BREAK           reduce using rule 40 (expression -> expression DOTMUL expression .)
    CONTINUE        reduce using rule 40 (expression -> expression DOTMUL expression .)
    RETURN          reduce using rule 40 (expression -> expression DOTMUL expression .)
    PRINT           reduce using rule 40 (expression -> expression DOTMUL expression .)
    IF              reduce using rule 40 (expression -> expression DOTMUL expression .)
    WHILE           reduce using rule 40 (expression -> expression DOTMUL expression .)
    FOR             reduce using rule 40 (expression -> expression DOTMUL expression .)
    ID              reduce using rule 40 (expression -> expression DOTMUL expression .)
    FLOAT           reduce using rule 40 (expression -> expression DOTMUL expression .)
    INT             reduce using rule 40 (expression -> expression DOTMUL expression .)
    [               reduce using rule 40 (expression -> expression DOTMUL expression .)
    ZEROS           reduce using rule 40 (expression -> expression DOTMUL expression .)
    EYE             reduce using rule 40 (expression -> expression DOTMUL expression .)
    ONES            reduce using rule 40 (expression -> expression DOTMUL expression .)
    STRING          reduce using rule 40 (expression -> expression DOTMUL expression .)
    '               shift and go to state 60

  ! '               [ reduce using rule 40 (expression -> expression DOTMUL expression .) ]
  ! +               [ shift and go to state 52 ]
  ! -               [ shift and go to state 53 ]
  ! *               [ shift and go to state 54 ]
  ! /               [ shift and go to state 55 ]
  ! DOTADD          [ shift and go to state 56 ]
  ! DOTSUB          [ shift and go to state 57 ]
  ! DOTMUL          [ shift and go to state 58 ]
  ! DOTDIV          [ shift and go to state 59 ]


state 102

    (41) expression -> expression DOTDIV expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . DOTADD expression
    (39) expression -> expression . DOTSUB expression
    (40) expression -> expression . DOTMUL expression
    (41) expression -> expression . DOTDIV expression
    (57) expression -> expression . '

    ;               reduce using rule 41 (expression -> expression DOTDIV expression .)
    LT              reduce using rule 41 (expression -> expression DOTDIV expression .)
    GT              reduce using rule 41 (expression -> expression DOTDIV expression .)
    LE              reduce using rule 41 (expression -> expression DOTDIV expression .)
    GE              reduce using rule 41 (expression -> expression DOTDIV expression .)
    NE              reduce using rule 41 (expression -> expression DOTDIV expression .)
    EQ              reduce using rule 41 (expression -> expression DOTDIV expression .)
    +               reduce using rule 41 (expression -> expression DOTDIV expression .)
    -               reduce using rule 41 (expression -> expression DOTDIV expression .)
    *               reduce using rule 41 (expression -> expression DOTDIV expression .)
    /               reduce using rule 41 (expression -> expression DOTDIV expression .)
    DOTADD          reduce using rule 41 (expression -> expression DOTDIV expression .)
    DOTSUB          reduce using rule 41 (expression -> expression DOTDIV expression .)
    DOTMUL          reduce using rule 41 (expression -> expression DOTDIV expression .)
    DOTDIV          reduce using rule 41 (expression -> expression DOTDIV expression .)
    )               reduce using rule 41 (expression -> expression DOTDIV expression .)
    ,               reduce using rule 41 (expression -> expression DOTDIV expression .)
    ]               reduce using rule 41 (expression -> expression DOTDIV expression .)
    :               reduce using rule 41 (expression -> expression DOTDIV expression .)
    {               reduce using rule 41 (expression -> expression DOTDIV expression .)
    (               reduce using rule 41 (expression -> expression DOTDIV expression .)
    BREAK           reduce using rule 41 (expression -> expression DOTDIV expression .)
    CONTINUE        reduce using rule 41 (expression -> expression DOTDIV expression .)
    RETURN          reduce using rule 41 (expression -> expression DOTDIV expression .)
    PRINT           reduce using rule 41 (expression -> expression DOTDIV expression .)
    IF              reduce using rule 41 (expression -> expression DOTDIV expression .)
    WHILE           reduce using rule 41 (expression -> expression DOTDIV expression .)
    FOR             reduce using rule 41 (expression -> expression DOTDIV expression .)
    ID              reduce using rule 41 (expression -> expression DOTDIV expression .)
    FLOAT           reduce using rule 41 (expression -> expression DOTDIV expression .)
    INT             reduce using rule 41 (expression -> expression DOTDIV expression .)
    [               reduce using rule 41 (expression -> expression DOTDIV expression .)
    ZEROS           reduce using rule 41 (expression -> expression DOTDIV expression .)
    EYE             reduce using rule 41 (expression -> expression DOTDIV expression .)
    ONES            reduce using rule 41 (expression -> expression DOTDIV expression .)
    STRING          reduce using rule 41 (expression -> expression DOTDIV expression .)
    '               shift and go to state 60

  ! '               [ reduce using rule 41 (expression -> expression DOTDIV expression .) ]
  ! +               [ shift and go to state 52 ]
  ! -               [ shift and go to state 53 ]
  ! *               [ shift and go to state 54 ]
  ! /               [ shift and go to state 55 ]
  ! DOTADD          [ shift and go to state 56 ]
  ! DOTSUB          [ shift and go to state 57 ]
  ! DOTMUL          [ shift and go to state 58 ]
  ! DOTDIV          [ shift and go to state 59 ]


state 103

    (19) instruction_block -> { instructions } .

    ;               reduce using rule 19 (instruction_block -> { instructions } .)
    {               reduce using rule 19 (instruction_block -> { instructions } .)
    (               reduce using rule 19 (instruction_block -> { instructions } .)
    -               reduce using rule 19 (instruction_block -> { instructions } .)
    BREAK           reduce using rule 19 (instruction_block -> { instructions } .)
    CONTINUE        reduce using rule 19 (instruction_block -> { instructions } .)
    RETURN          reduce using rule 19 (instruction_block -> { instructions } .)
    PRINT           reduce using rule 19 (instruction_block -> { instructions } .)
    IF              reduce using rule 19 (instruction_block -> { instructions } .)
    WHILE           reduce using rule 19 (instruction_block -> { instructions } .)
    FOR             reduce using rule 19 (instruction_block -> { instructions } .)
    ID              reduce using rule 19 (instruction_block -> { instructions } .)
    FLOAT           reduce using rule 19 (instruction_block -> { instructions } .)
    INT             reduce using rule 19 (instruction_block -> { instructions } .)
    [               reduce using rule 19 (instruction_block -> { instructions } .)
    ZEROS           reduce using rule 19 (instruction_block -> { instructions } .)
    EYE             reduce using rule 19 (instruction_block -> { instructions } .)
    ONES            reduce using rule 19 (instruction_block -> { instructions } .)
    STRING          reduce using rule 19 (instruction_block -> { instructions } .)
    $end            reduce using rule 19 (instruction_block -> { instructions } .)
    }               reduce using rule 19 (instruction_block -> { instructions } .)
    ELSE            reduce using rule 19 (instruction_block -> { instructions } .)


state 104

    (25) assignment -> var assign_op expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . DOTADD expression
    (39) expression -> expression . DOTSUB expression
    (40) expression -> expression . DOTMUL expression
    (41) expression -> expression . DOTDIV expression
    (57) expression -> expression . '

    ;               reduce using rule 25 (assignment -> var assign_op expression .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60


state 105

    (26) assignment -> ref assign_op expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . DOTADD expression
    (39) expression -> expression . DOTSUB expression
    (40) expression -> expression . DOTMUL expression
    (41) expression -> expression . DOTDIV expression
    (57) expression -> expression . '

    ;               reduce using rule 26 (assignment -> ref assign_op expression .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60


state 106

    (42) expression -> ( expression ) .

    ;               reduce using rule 42 (expression -> ( expression ) .)
    LT              reduce using rule 42 (expression -> ( expression ) .)
    GT              reduce using rule 42 (expression -> ( expression ) .)
    LE              reduce using rule 42 (expression -> ( expression ) .)
    GE              reduce using rule 42 (expression -> ( expression ) .)
    NE              reduce using rule 42 (expression -> ( expression ) .)
    EQ              reduce using rule 42 (expression -> ( expression ) .)
    +               reduce using rule 42 (expression -> ( expression ) .)
    -               reduce using rule 42 (expression -> ( expression ) .)
    *               reduce using rule 42 (expression -> ( expression ) .)
    /               reduce using rule 42 (expression -> ( expression ) .)
    DOTADD          reduce using rule 42 (expression -> ( expression ) .)
    DOTSUB          reduce using rule 42 (expression -> ( expression ) .)
    DOTMUL          reduce using rule 42 (expression -> ( expression ) .)
    DOTDIV          reduce using rule 42 (expression -> ( expression ) .)
    '               reduce using rule 42 (expression -> ( expression ) .)
    )               reduce using rule 42 (expression -> ( expression ) .)
    ,               reduce using rule 42 (expression -> ( expression ) .)
    ]               reduce using rule 42 (expression -> ( expression ) .)
    :               reduce using rule 42 (expression -> ( expression ) .)
    {               reduce using rule 42 (expression -> ( expression ) .)
    (               reduce using rule 42 (expression -> ( expression ) .)
    BREAK           reduce using rule 42 (expression -> ( expression ) .)
    CONTINUE        reduce using rule 42 (expression -> ( expression ) .)
    RETURN          reduce using rule 42 (expression -> ( expression ) .)
    PRINT           reduce using rule 42 (expression -> ( expression ) .)
    IF              reduce using rule 42 (expression -> ( expression ) .)
    WHILE           reduce using rule 42 (expression -> ( expression ) .)
    FOR             reduce using rule 42 (expression -> ( expression ) .)
    ID              reduce using rule 42 (expression -> ( expression ) .)
    FLOAT           reduce using rule 42 (expression -> ( expression ) .)
    INT             reduce using rule 42 (expression -> ( expression ) .)
    [               reduce using rule 42 (expression -> ( expression ) .)
    ZEROS           reduce using rule 42 (expression -> ( expression ) .)
    EYE             reduce using rule 42 (expression -> ( expression ) .)
    ONES            reduce using rule 42 (expression -> ( expression ) .)
    STRING          reduce using rule 42 (expression -> ( expression ) .)


state 107

    (55) value_list -> value_list , . expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    expression                     shift and go to state 117
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 108

    (67) if -> IF ( relation . ) instruction
    (68) if -> IF ( relation . ) instruction ELSE instruction

    )               shift and go to state 118


state 109

    (61) relation -> expression . LT expression
    (62) relation -> expression . GT expression
    (63) relation -> expression . LE expression
    (64) relation -> expression . GE expression
    (65) relation -> expression . NE expression
    (66) relation -> expression . EQ expression
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . DOTADD expression
    (39) expression -> expression . DOTSUB expression
    (40) expression -> expression . DOTMUL expression
    (41) expression -> expression . DOTDIV expression
    (57) expression -> expression . '

    LT              shift and go to state 46
    GT              shift and go to state 47
    LE              shift and go to state 48
    GE              shift and go to state 49
    NE              shift and go to state 50
    EQ              shift and go to state 51
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60


state 110

    (69) while -> WHILE ( relation . ) instruction

    )               shift and go to state 119


state 111

    (71) for -> FOR ID = . range instruction
    (70) range -> . expression : expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    range                          shift and go to state 120
    expression                     shift and go to state 121
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 112

    (33) ref -> ID [ value_list . ]
    (55) value_list -> value_list . , expression

    ]               shift and go to state 122
    ,               shift and go to state 107


state 113

    (53) list -> [ value_list ] .

    ;               reduce using rule 53 (list -> [ value_list ] .)
    LT              reduce using rule 53 (list -> [ value_list ] .)
    GT              reduce using rule 53 (list -> [ value_list ] .)
    LE              reduce using rule 53 (list -> [ value_list ] .)
    GE              reduce using rule 53 (list -> [ value_list ] .)
    NE              reduce using rule 53 (list -> [ value_list ] .)
    EQ              reduce using rule 53 (list -> [ value_list ] .)
    +               reduce using rule 53 (list -> [ value_list ] .)
    -               reduce using rule 53 (list -> [ value_list ] .)
    *               reduce using rule 53 (list -> [ value_list ] .)
    /               reduce using rule 53 (list -> [ value_list ] .)
    DOTADD          reduce using rule 53 (list -> [ value_list ] .)
    DOTSUB          reduce using rule 53 (list -> [ value_list ] .)
    DOTMUL          reduce using rule 53 (list -> [ value_list ] .)
    DOTDIV          reduce using rule 53 (list -> [ value_list ] .)
    '               reduce using rule 53 (list -> [ value_list ] .)
    )               reduce using rule 53 (list -> [ value_list ] .)
    ,               reduce using rule 53 (list -> [ value_list ] .)
    ]               reduce using rule 53 (list -> [ value_list ] .)
    :               reduce using rule 53 (list -> [ value_list ] .)
    {               reduce using rule 53 (list -> [ value_list ] .)
    (               reduce using rule 53 (list -> [ value_list ] .)
    BREAK           reduce using rule 53 (list -> [ value_list ] .)
    CONTINUE        reduce using rule 53 (list -> [ value_list ] .)
    RETURN          reduce using rule 53 (list -> [ value_list ] .)
    PRINT           reduce using rule 53 (list -> [ value_list ] .)
    IF              reduce using rule 53 (list -> [ value_list ] .)
    WHILE           reduce using rule 53 (list -> [ value_list ] .)
    FOR             reduce using rule 53 (list -> [ value_list ] .)
    ID              reduce using rule 53 (list -> [ value_list ] .)
    FLOAT           reduce using rule 53 (list -> [ value_list ] .)
    INT             reduce using rule 53 (list -> [ value_list ] .)
    [               reduce using rule 53 (list -> [ value_list ] .)
    ZEROS           reduce using rule 53 (list -> [ value_list ] .)
    EYE             reduce using rule 53 (list -> [ value_list ] .)
    ONES            reduce using rule 53 (list -> [ value_list ] .)
    STRING          reduce using rule 53 (list -> [ value_list ] .)


state 114

    (50) function -> ZEROS ( value_list . )
    (55) value_list -> value_list . , expression

    )               shift and go to state 123
    ,               shift and go to state 107


state 115

    (51) function -> EYE ( value_list . )
    (55) value_list -> value_list . , expression

    )               shift and go to state 124
    ,               shift and go to state 107


state 116

    (52) function -> ONES ( value_list . )
    (55) value_list -> value_list . , expression

    )               shift and go to state 125
    ,               shift and go to state 107


state 117

    (55) value_list -> value_list , expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . DOTADD expression
    (39) expression -> expression . DOTSUB expression
    (40) expression -> expression . DOTMUL expression
    (41) expression -> expression . DOTDIV expression
    (57) expression -> expression . '

    ,               reduce using rule 55 (value_list -> value_list , expression .)
    ;               reduce using rule 55 (value_list -> value_list , expression .)
    ]               reduce using rule 55 (value_list -> value_list , expression .)
    )               reduce using rule 55 (value_list -> value_list , expression .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60


state 118

    (67) if -> IF ( relation ) . instruction
    (68) if -> IF ( relation ) . instruction ELSE instruction
    (7) instruction -> . instruction_block
    (8) instruction -> . assignment ;
    (9) instruction -> . relation ;
    (10) instruction -> . expression ;
    (11) instruction -> . break ;
    (12) instruction -> . continue ;
    (13) instruction -> . return ;
    (14) instruction -> . print ;
    (15) instruction -> . if
    (16) instruction -> . while
    (17) instruction -> . for
    (18) instruction -> . ;
    (19) instruction_block -> . { instructions }
    (25) assignment -> . var assign_op expression
    (26) assignment -> . ref assign_op expression
    (61) relation -> . expression LT expression
    (62) relation -> . expression GT expression
    (63) relation -> . expression LE expression
    (64) relation -> . expression GE expression
    (65) relation -> . expression NE expression
    (66) relation -> . expression EQ expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (20) break -> . BREAK
    (21) continue -> . CONTINUE
    (22) return -> . RETURN
    (23) return -> . RETURN expression
    (24) print -> . PRINT value_list
    (67) if -> . IF ( relation ) instruction
    (68) if -> . IF ( relation ) instruction ELSE instruction
    (69) while -> . WHILE ( relation ) instruction
    (71) for -> . FOR ID = range instruction
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    ;               shift and go to state 8
    {               shift and go to state 18
    (               shift and go to state 22
    -               shift and go to state 21
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 29
    PRINT           shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    relation                       shift and go to state 9
    instruction                    shift and go to state 126
    instruction_block              shift and go to state 6
    assignment                     shift and go to state 7
    expression                     shift and go to state 10
    break                          shift and go to state 11
    continue                       shift and go to state 12
    return                         shift and go to state 13
    print                          shift and go to state 14
    if                             shift and go to state 15
    while                          shift and go to state 16
    for                            shift and go to state 17
    var                            shift and go to state 19
    ref                            shift and go to state 20
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 119

    (69) while -> WHILE ( relation ) . instruction
    (7) instruction -> . instruction_block
    (8) instruction -> . assignment ;
    (9) instruction -> . relation ;
    (10) instruction -> . expression ;
    (11) instruction -> . break ;
    (12) instruction -> . continue ;
    (13) instruction -> . return ;
    (14) instruction -> . print ;
    (15) instruction -> . if
    (16) instruction -> . while
    (17) instruction -> . for
    (18) instruction -> . ;
    (19) instruction_block -> . { instructions }
    (25) assignment -> . var assign_op expression
    (26) assignment -> . ref assign_op expression
    (61) relation -> . expression LT expression
    (62) relation -> . expression GT expression
    (63) relation -> . expression LE expression
    (64) relation -> . expression GE expression
    (65) relation -> . expression NE expression
    (66) relation -> . expression EQ expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (20) break -> . BREAK
    (21) continue -> . CONTINUE
    (22) return -> . RETURN
    (23) return -> . RETURN expression
    (24) print -> . PRINT value_list
    (67) if -> . IF ( relation ) instruction
    (68) if -> . IF ( relation ) instruction ELSE instruction
    (69) while -> . WHILE ( relation ) instruction
    (71) for -> . FOR ID = range instruction
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    ;               shift and go to state 8
    {               shift and go to state 18
    (               shift and go to state 22
    -               shift and go to state 21
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 29
    PRINT           shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    relation                       shift and go to state 9
    instruction                    shift and go to state 127
    instruction_block              shift and go to state 6
    assignment                     shift and go to state 7
    expression                     shift and go to state 10
    break                          shift and go to state 11
    continue                       shift and go to state 12
    return                         shift and go to state 13
    print                          shift and go to state 14
    if                             shift and go to state 15
    while                          shift and go to state 16
    for                            shift and go to state 17
    var                            shift and go to state 19
    ref                            shift and go to state 20
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 120

    (71) for -> FOR ID = range . instruction
    (7) instruction -> . instruction_block
    (8) instruction -> . assignment ;
    (9) instruction -> . relation ;
    (10) instruction -> . expression ;
    (11) instruction -> . break ;
    (12) instruction -> . continue ;
    (13) instruction -> . return ;
    (14) instruction -> . print ;
    (15) instruction -> . if
    (16) instruction -> . while
    (17) instruction -> . for
    (18) instruction -> . ;
    (19) instruction_block -> . { instructions }
    (25) assignment -> . var assign_op expression
    (26) assignment -> . ref assign_op expression
    (61) relation -> . expression LT expression
    (62) relation -> . expression GT expression
    (63) relation -> . expression LE expression
    (64) relation -> . expression GE expression
    (65) relation -> . expression NE expression
    (66) relation -> . expression EQ expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (20) break -> . BREAK
    (21) continue -> . CONTINUE
    (22) return -> . RETURN
    (23) return -> . RETURN expression
    (24) print -> . PRINT value_list
    (67) if -> . IF ( relation ) instruction
    (68) if -> . IF ( relation ) instruction ELSE instruction
    (69) while -> . WHILE ( relation ) instruction
    (71) for -> . FOR ID = range instruction
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    ;               shift and go to state 8
    {               shift and go to state 18
    (               shift and go to state 22
    -               shift and go to state 21
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 29
    PRINT           shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    instruction                    shift and go to state 128
    instruction_block              shift and go to state 6
    assignment                     shift and go to state 7
    relation                       shift and go to state 9
    expression                     shift and go to state 10
    break                          shift and go to state 11
    continue                       shift and go to state 12
    return                         shift and go to state 13
    print                          shift and go to state 14
    if                             shift and go to state 15
    while                          shift and go to state 16
    for                            shift and go to state 17
    var                            shift and go to state 19
    ref                            shift and go to state 20
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 121

    (70) range -> expression . : expression
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . DOTADD expression
    (39) expression -> expression . DOTSUB expression
    (40) expression -> expression . DOTMUL expression
    (41) expression -> expression . DOTDIV expression
    (57) expression -> expression . '

    :               shift and go to state 129
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60


state 122

    (33) ref -> ID [ value_list ] .

    =               reduce using rule 33 (ref -> ID [ value_list ] .)
    ADDASSIGN       reduce using rule 33 (ref -> ID [ value_list ] .)
    SUBASSIGN       reduce using rule 33 (ref -> ID [ value_list ] .)
    MULASSIGN       reduce using rule 33 (ref -> ID [ value_list ] .)
    DIVASSIGN       reduce using rule 33 (ref -> ID [ value_list ] .)
    ;               reduce using rule 33 (ref -> ID [ value_list ] .)
    LT              reduce using rule 33 (ref -> ID [ value_list ] .)
    GT              reduce using rule 33 (ref -> ID [ value_list ] .)
    LE              reduce using rule 33 (ref -> ID [ value_list ] .)
    GE              reduce using rule 33 (ref -> ID [ value_list ] .)
    NE              reduce using rule 33 (ref -> ID [ value_list ] .)
    EQ              reduce using rule 33 (ref -> ID [ value_list ] .)
    +               reduce using rule 33 (ref -> ID [ value_list ] .)
    -               reduce using rule 33 (ref -> ID [ value_list ] .)
    *               reduce using rule 33 (ref -> ID [ value_list ] .)
    /               reduce using rule 33 (ref -> ID [ value_list ] .)
    DOTADD          reduce using rule 33 (ref -> ID [ value_list ] .)
    DOTSUB          reduce using rule 33 (ref -> ID [ value_list ] .)
    DOTMUL          reduce using rule 33 (ref -> ID [ value_list ] .)
    DOTDIV          reduce using rule 33 (ref -> ID [ value_list ] .)
    '               reduce using rule 33 (ref -> ID [ value_list ] .)
    )               reduce using rule 33 (ref -> ID [ value_list ] .)
    ,               reduce using rule 33 (ref -> ID [ value_list ] .)
    ]               reduce using rule 33 (ref -> ID [ value_list ] .)
    :               reduce using rule 33 (ref -> ID [ value_list ] .)
    {               reduce using rule 33 (ref -> ID [ value_list ] .)
    (               reduce using rule 33 (ref -> ID [ value_list ] .)
    BREAK           reduce using rule 33 (ref -> ID [ value_list ] .)
    CONTINUE        reduce using rule 33 (ref -> ID [ value_list ] .)
    RETURN          reduce using rule 33 (ref -> ID [ value_list ] .)
    PRINT           reduce using rule 33 (ref -> ID [ value_list ] .)
    IF              reduce using rule 33 (ref -> ID [ value_list ] .)
    WHILE           reduce using rule 33 (ref -> ID [ value_list ] .)
    FOR             reduce using rule 33 (ref -> ID [ value_list ] .)
    ID              reduce using rule 33 (ref -> ID [ value_list ] .)
    FLOAT           reduce using rule 33 (ref -> ID [ value_list ] .)
    INT             reduce using rule 33 (ref -> ID [ value_list ] .)
    [               reduce using rule 33 (ref -> ID [ value_list ] .)
    ZEROS           reduce using rule 33 (ref -> ID [ value_list ] .)
    EYE             reduce using rule 33 (ref -> ID [ value_list ] .)
    ONES            reduce using rule 33 (ref -> ID [ value_list ] .)
    STRING          reduce using rule 33 (ref -> ID [ value_list ] .)


state 123

    (50) function -> ZEROS ( value_list ) .

    ;               reduce using rule 50 (function -> ZEROS ( value_list ) .)
    LT              reduce using rule 50 (function -> ZEROS ( value_list ) .)
    GT              reduce using rule 50 (function -> ZEROS ( value_list ) .)
    LE              reduce using rule 50 (function -> ZEROS ( value_list ) .)
    GE              reduce using rule 50 (function -> ZEROS ( value_list ) .)
    NE              reduce using rule 50 (function -> ZEROS ( value_list ) .)
    EQ              reduce using rule 50 (function -> ZEROS ( value_list ) .)
    +               reduce using rule 50 (function -> ZEROS ( value_list ) .)
    -               reduce using rule 50 (function -> ZEROS ( value_list ) .)
    *               reduce using rule 50 (function -> ZEROS ( value_list ) .)
    /               reduce using rule 50 (function -> ZEROS ( value_list ) .)
    DOTADD          reduce using rule 50 (function -> ZEROS ( value_list ) .)
    DOTSUB          reduce using rule 50 (function -> ZEROS ( value_list ) .)
    DOTMUL          reduce using rule 50 (function -> ZEROS ( value_list ) .)
    DOTDIV          reduce using rule 50 (function -> ZEROS ( value_list ) .)
    '               reduce using rule 50 (function -> ZEROS ( value_list ) .)
    )               reduce using rule 50 (function -> ZEROS ( value_list ) .)
    ,               reduce using rule 50 (function -> ZEROS ( value_list ) .)
    ]               reduce using rule 50 (function -> ZEROS ( value_list ) .)
    :               reduce using rule 50 (function -> ZEROS ( value_list ) .)
    {               reduce using rule 50 (function -> ZEROS ( value_list ) .)
    (               reduce using rule 50 (function -> ZEROS ( value_list ) .)
    BREAK           reduce using rule 50 (function -> ZEROS ( value_list ) .)
    CONTINUE        reduce using rule 50 (function -> ZEROS ( value_list ) .)
    RETURN          reduce using rule 50 (function -> ZEROS ( value_list ) .)
    PRINT           reduce using rule 50 (function -> ZEROS ( value_list ) .)
    IF              reduce using rule 50 (function -> ZEROS ( value_list ) .)
    WHILE           reduce using rule 50 (function -> ZEROS ( value_list ) .)
    FOR             reduce using rule 50 (function -> ZEROS ( value_list ) .)
    ID              reduce using rule 50 (function -> ZEROS ( value_list ) .)
    FLOAT           reduce using rule 50 (function -> ZEROS ( value_list ) .)
    INT             reduce using rule 50 (function -> ZEROS ( value_list ) .)
    [               reduce using rule 50 (function -> ZEROS ( value_list ) .)
    ZEROS           reduce using rule 50 (function -> ZEROS ( value_list ) .)
    EYE             reduce using rule 50 (function -> ZEROS ( value_list ) .)
    ONES            reduce using rule 50 (function -> ZEROS ( value_list ) .)
    STRING          reduce using rule 50 (function -> ZEROS ( value_list ) .)


state 124

    (51) function -> EYE ( value_list ) .

    ;               reduce using rule 51 (function -> EYE ( value_list ) .)
    LT              reduce using rule 51 (function -> EYE ( value_list ) .)
    GT              reduce using rule 51 (function -> EYE ( value_list ) .)
    LE              reduce using rule 51 (function -> EYE ( value_list ) .)
    GE              reduce using rule 51 (function -> EYE ( value_list ) .)
    NE              reduce using rule 51 (function -> EYE ( value_list ) .)
    EQ              reduce using rule 51 (function -> EYE ( value_list ) .)
    +               reduce using rule 51 (function -> EYE ( value_list ) .)
    -               reduce using rule 51 (function -> EYE ( value_list ) .)
    *               reduce using rule 51 (function -> EYE ( value_list ) .)
    /               reduce using rule 51 (function -> EYE ( value_list ) .)
    DOTADD          reduce using rule 51 (function -> EYE ( value_list ) .)
    DOTSUB          reduce using rule 51 (function -> EYE ( value_list ) .)
    DOTMUL          reduce using rule 51 (function -> EYE ( value_list ) .)
    DOTDIV          reduce using rule 51 (function -> EYE ( value_list ) .)
    '               reduce using rule 51 (function -> EYE ( value_list ) .)
    )               reduce using rule 51 (function -> EYE ( value_list ) .)
    ,               reduce using rule 51 (function -> EYE ( value_list ) .)
    ]               reduce using rule 51 (function -> EYE ( value_list ) .)
    :               reduce using rule 51 (function -> EYE ( value_list ) .)
    {               reduce using rule 51 (function -> EYE ( value_list ) .)
    (               reduce using rule 51 (function -> EYE ( value_list ) .)
    BREAK           reduce using rule 51 (function -> EYE ( value_list ) .)
    CONTINUE        reduce using rule 51 (function -> EYE ( value_list ) .)
    RETURN          reduce using rule 51 (function -> EYE ( value_list ) .)
    PRINT           reduce using rule 51 (function -> EYE ( value_list ) .)
    IF              reduce using rule 51 (function -> EYE ( value_list ) .)
    WHILE           reduce using rule 51 (function -> EYE ( value_list ) .)
    FOR             reduce using rule 51 (function -> EYE ( value_list ) .)
    ID              reduce using rule 51 (function -> EYE ( value_list ) .)
    FLOAT           reduce using rule 51 (function -> EYE ( value_list ) .)
    INT             reduce using rule 51 (function -> EYE ( value_list ) .)
    [               reduce using rule 51 (function -> EYE ( value_list ) .)
    ZEROS           reduce using rule 51 (function -> EYE ( value_list ) .)
    EYE             reduce using rule 51 (function -> EYE ( value_list ) .)
    ONES            reduce using rule 51 (function -> EYE ( value_list ) .)
    STRING          reduce using rule 51 (function -> EYE ( value_list ) .)


state 125

    (52) function -> ONES ( value_list ) .

    ;               reduce using rule 52 (function -> ONES ( value_list ) .)
    LT              reduce using rule 52 (function -> ONES ( value_list ) .)
    GT              reduce using rule 52 (function -> ONES ( value_list ) .)
    LE              reduce using rule 52 (function -> ONES ( value_list ) .)
    GE              reduce using rule 52 (function -> ONES ( value_list ) .)
    NE              reduce using rule 52 (function -> ONES ( value_list ) .)
    EQ              reduce using rule 52 (function -> ONES ( value_list ) .)
    +               reduce using rule 52 (function -> ONES ( value_list ) .)
    -               reduce using rule 52 (function -> ONES ( value_list ) .)
    *               reduce using rule 52 (function -> ONES ( value_list ) .)
    /               reduce using rule 52 (function -> ONES ( value_list ) .)
    DOTADD          reduce using rule 52 (function -> ONES ( value_list ) .)
    DOTSUB          reduce using rule 52 (function -> ONES ( value_list ) .)
    DOTMUL          reduce using rule 52 (function -> ONES ( value_list ) .)
    DOTDIV          reduce using rule 52 (function -> ONES ( value_list ) .)
    '               reduce using rule 52 (function -> ONES ( value_list ) .)
    )               reduce using rule 52 (function -> ONES ( value_list ) .)
    ,               reduce using rule 52 (function -> ONES ( value_list ) .)
    ]               reduce using rule 52 (function -> ONES ( value_list ) .)
    :               reduce using rule 52 (function -> ONES ( value_list ) .)
    {               reduce using rule 52 (function -> ONES ( value_list ) .)
    (               reduce using rule 52 (function -> ONES ( value_list ) .)
    BREAK           reduce using rule 52 (function -> ONES ( value_list ) .)
    CONTINUE        reduce using rule 52 (function -> ONES ( value_list ) .)
    RETURN          reduce using rule 52 (function -> ONES ( value_list ) .)
    PRINT           reduce using rule 52 (function -> ONES ( value_list ) .)
    IF              reduce using rule 52 (function -> ONES ( value_list ) .)
    WHILE           reduce using rule 52 (function -> ONES ( value_list ) .)
    FOR             reduce using rule 52 (function -> ONES ( value_list ) .)
    ID              reduce using rule 52 (function -> ONES ( value_list ) .)
    FLOAT           reduce using rule 52 (function -> ONES ( value_list ) .)
    INT             reduce using rule 52 (function -> ONES ( value_list ) .)
    [               reduce using rule 52 (function -> ONES ( value_list ) .)
    ZEROS           reduce using rule 52 (function -> ONES ( value_list ) .)
    EYE             reduce using rule 52 (function -> ONES ( value_list ) .)
    ONES            reduce using rule 52 (function -> ONES ( value_list ) .)
    STRING          reduce using rule 52 (function -> ONES ( value_list ) .)


state 126

    (67) if -> IF ( relation ) instruction .
    (68) if -> IF ( relation ) instruction . ELSE instruction

    ;               reduce using rule 67 (if -> IF ( relation ) instruction .)
    {               reduce using rule 67 (if -> IF ( relation ) instruction .)
    (               reduce using rule 67 (if -> IF ( relation ) instruction .)
    -               reduce using rule 67 (if -> IF ( relation ) instruction .)
    BREAK           reduce using rule 67 (if -> IF ( relation ) instruction .)
    CONTINUE        reduce using rule 67 (if -> IF ( relation ) instruction .)
    RETURN          reduce using rule 67 (if -> IF ( relation ) instruction .)
    PRINT           reduce using rule 67 (if -> IF ( relation ) instruction .)
    IF              reduce using rule 67 (if -> IF ( relation ) instruction .)
    WHILE           reduce using rule 67 (if -> IF ( relation ) instruction .)
    FOR             reduce using rule 67 (if -> IF ( relation ) instruction .)
    ID              reduce using rule 67 (if -> IF ( relation ) instruction .)
    FLOAT           reduce using rule 67 (if -> IF ( relation ) instruction .)
    INT             reduce using rule 67 (if -> IF ( relation ) instruction .)
    [               reduce using rule 67 (if -> IF ( relation ) instruction .)
    ZEROS           reduce using rule 67 (if -> IF ( relation ) instruction .)
    EYE             reduce using rule 67 (if -> IF ( relation ) instruction .)
    ONES            reduce using rule 67 (if -> IF ( relation ) instruction .)
    STRING          reduce using rule 67 (if -> IF ( relation ) instruction .)
    $end            reduce using rule 67 (if -> IF ( relation ) instruction .)
    }               reduce using rule 67 (if -> IF ( relation ) instruction .)
    ELSE            shift and go to state 130

  ! ELSE            [ reduce using rule 67 (if -> IF ( relation ) instruction .) ]


state 127

    (69) while -> WHILE ( relation ) instruction .

    ;               reduce using rule 69 (while -> WHILE ( relation ) instruction .)
    {               reduce using rule 69 (while -> WHILE ( relation ) instruction .)
    (               reduce using rule 69 (while -> WHILE ( relation ) instruction .)
    -               reduce using rule 69 (while -> WHILE ( relation ) instruction .)
    BREAK           reduce using rule 69 (while -> WHILE ( relation ) instruction .)
    CONTINUE        reduce using rule 69 (while -> WHILE ( relation ) instruction .)
    RETURN          reduce using rule 69 (while -> WHILE ( relation ) instruction .)
    PRINT           reduce using rule 69 (while -> WHILE ( relation ) instruction .)
    IF              reduce using rule 69 (while -> WHILE ( relation ) instruction .)
    WHILE           reduce using rule 69 (while -> WHILE ( relation ) instruction .)
    FOR             reduce using rule 69 (while -> WHILE ( relation ) instruction .)
    ID              reduce using rule 69 (while -> WHILE ( relation ) instruction .)
    FLOAT           reduce using rule 69 (while -> WHILE ( relation ) instruction .)
    INT             reduce using rule 69 (while -> WHILE ( relation ) instruction .)
    [               reduce using rule 69 (while -> WHILE ( relation ) instruction .)
    ZEROS           reduce using rule 69 (while -> WHILE ( relation ) instruction .)
    EYE             reduce using rule 69 (while -> WHILE ( relation ) instruction .)
    ONES            reduce using rule 69 (while -> WHILE ( relation ) instruction .)
    STRING          reduce using rule 69 (while -> WHILE ( relation ) instruction .)
    $end            reduce using rule 69 (while -> WHILE ( relation ) instruction .)
    }               reduce using rule 69 (while -> WHILE ( relation ) instruction .)
    ELSE            reduce using rule 69 (while -> WHILE ( relation ) instruction .)


state 128

    (71) for -> FOR ID = range instruction .

    ;               reduce using rule 71 (for -> FOR ID = range instruction .)
    {               reduce using rule 71 (for -> FOR ID = range instruction .)
    (               reduce using rule 71 (for -> FOR ID = range instruction .)
    -               reduce using rule 71 (for -> FOR ID = range instruction .)
    BREAK           reduce using rule 71 (for -> FOR ID = range instruction .)
    CONTINUE        reduce using rule 71 (for -> FOR ID = range instruction .)
    RETURN          reduce using rule 71 (for -> FOR ID = range instruction .)
    PRINT           reduce using rule 71 (for -> FOR ID = range instruction .)
    IF              reduce using rule 71 (for -> FOR ID = range instruction .)
    WHILE           reduce using rule 71 (for -> FOR ID = range instruction .)
    FOR             reduce using rule 71 (for -> FOR ID = range instruction .)
    ID              reduce using rule 71 (for -> FOR ID = range instruction .)
    FLOAT           reduce using rule 71 (for -> FOR ID = range instruction .)
    INT             reduce using rule 71 (for -> FOR ID = range instruction .)
    [               reduce using rule 71 (for -> FOR ID = range instruction .)
    ZEROS           reduce using rule 71 (for -> FOR ID = range instruction .)
    EYE             reduce using rule 71 (for -> FOR ID = range instruction .)
    ONES            reduce using rule 71 (for -> FOR ID = range instruction .)
    STRING          reduce using rule 71 (for -> FOR ID = range instruction .)
    $end            reduce using rule 71 (for -> FOR ID = range instruction .)
    }               reduce using rule 71 (for -> FOR ID = range instruction .)
    ELSE            reduce using rule 71 (for -> FOR ID = range instruction .)


state 129

    (70) range -> expression : . expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    (               shift and go to state 22
    -               shift and go to state 21
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    expression                     shift and go to state 131
    var                            shift and go to state 74
    ref                            shift and go to state 75
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 130

    (68) if -> IF ( relation ) instruction ELSE . instruction
    (7) instruction -> . instruction_block
    (8) instruction -> . assignment ;
    (9) instruction -> . relation ;
    (10) instruction -> . expression ;
    (11) instruction -> . break ;
    (12) instruction -> . continue ;
    (13) instruction -> . return ;
    (14) instruction -> . print ;
    (15) instruction -> . if
    (16) instruction -> . while
    (17) instruction -> . for
    (18) instruction -> . ;
    (19) instruction_block -> . { instructions }
    (25) assignment -> . var assign_op expression
    (26) assignment -> . ref assign_op expression
    (61) relation -> . expression LT expression
    (62) relation -> . expression GT expression
    (63) relation -> . expression LE expression
    (64) relation -> . expression GE expression
    (65) relation -> . expression NE expression
    (66) relation -> . expression EQ expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression DOTADD expression
    (39) expression -> . expression DOTSUB expression
    (40) expression -> . expression DOTMUL expression
    (41) expression -> . expression DOTDIV expression
    (42) expression -> . ( expression )
    (43) expression -> . var
    (44) expression -> . ref
    (45) expression -> . number
    (46) expression -> . list
    (47) expression -> . function
    (48) expression -> . string
    (57) expression -> . expression '
    (60) expression -> . - expression
    (20) break -> . BREAK
    (21) continue -> . CONTINUE
    (22) return -> . RETURN
    (23) return -> . RETURN expression
    (24) print -> . PRINT value_list
    (67) if -> . IF ( relation ) instruction
    (68) if -> . IF ( relation ) instruction ELSE instruction
    (69) while -> . WHILE ( relation ) instruction
    (71) for -> . FOR ID = range instruction
    (32) var -> . ID
    (33) ref -> . ID [ value_list ]
    (58) number -> . FLOAT
    (59) number -> . INT
    (53) list -> . [ value_list ]
    (54) list -> . [ ]
    (50) function -> . ZEROS ( value_list )
    (51) function -> . EYE ( value_list )
    (52) function -> . ONES ( value_list )
    (49) string -> . STRING

    ;               shift and go to state 8
    {               shift and go to state 18
    (               shift and go to state 22
    -               shift and go to state 21
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 29
    PRINT           shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    ID              shift and go to state 34
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    [               shift and go to state 35
    ZEROS           shift and go to state 38
    EYE             shift and go to state 39
    ONES            shift and go to state 40
    STRING          shift and go to state 41

    relation                       shift and go to state 9
    instruction                    shift and go to state 132
    instruction_block              shift and go to state 6
    assignment                     shift and go to state 7
    expression                     shift and go to state 10
    break                          shift and go to state 11
    continue                       shift and go to state 12
    return                         shift and go to state 13
    print                          shift and go to state 14
    if                             shift and go to state 15
    while                          shift and go to state 16
    for                            shift and go to state 17
    var                            shift and go to state 19
    ref                            shift and go to state 20
    number                         shift and go to state 23
    list                           shift and go to state 24
    function                       shift and go to state 25
    string                         shift and go to state 26

state 131

    (70) range -> expression : expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . DOTADD expression
    (39) expression -> expression . DOTSUB expression
    (40) expression -> expression . DOTMUL expression
    (41) expression -> expression . DOTDIV expression
    (57) expression -> expression . '

    ;               reduce using rule 70 (range -> expression : expression .)
    {               reduce using rule 70 (range -> expression : expression .)
    (               reduce using rule 70 (range -> expression : expression .)
    BREAK           reduce using rule 70 (range -> expression : expression .)
    CONTINUE        reduce using rule 70 (range -> expression : expression .)
    RETURN          reduce using rule 70 (range -> expression : expression .)
    PRINT           reduce using rule 70 (range -> expression : expression .)
    IF              reduce using rule 70 (range -> expression : expression .)
    WHILE           reduce using rule 70 (range -> expression : expression .)
    FOR             reduce using rule 70 (range -> expression : expression .)
    ID              reduce using rule 70 (range -> expression : expression .)
    FLOAT           reduce using rule 70 (range -> expression : expression .)
    INT             reduce using rule 70 (range -> expression : expression .)
    [               reduce using rule 70 (range -> expression : expression .)
    ZEROS           reduce using rule 70 (range -> expression : expression .)
    EYE             reduce using rule 70 (range -> expression : expression .)
    ONES            reduce using rule 70 (range -> expression : expression .)
    STRING          reduce using rule 70 (range -> expression : expression .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    DOTADD          shift and go to state 56
    DOTSUB          shift and go to state 57
    DOTMUL          shift and go to state 58
    DOTDIV          shift and go to state 59
    '               shift and go to state 60

  ! -               [ reduce using rule 70 (range -> expression : expression .) ]


state 132

    (68) if -> IF ( relation ) instruction ELSE instruction .

    ;               reduce using rule 68 (if -> IF ( relation ) instruction ELSE instruction .)
    {               reduce using rule 68 (if -> IF ( relation ) instruction ELSE instruction .)
    (               reduce using rule 68 (if -> IF ( relation ) instruction ELSE instruction .)
    -               reduce using rule 68 (if -> IF ( relation ) instruction ELSE instruction .)
    BREAK           reduce using rule 68 (if -> IF ( relation ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 68 (if -> IF ( relation ) instruction ELSE instruction .)
    RETURN          reduce using rule 68 (if -> IF ( relation ) instruction ELSE instruction .)
    PRINT           reduce using rule 68 (if -> IF ( relation ) instruction ELSE instruction .)
    IF              reduce using rule 68 (if -> IF ( relation ) instruction ELSE instruction .)
    WHILE           reduce using rule 68 (if -> IF ( relation ) instruction ELSE instruction .)
    FOR             reduce using rule 68 (if -> IF ( relation ) instruction ELSE instruction .)
    ID              reduce using rule 68 (if -> IF ( relation ) instruction ELSE instruction .)
    FLOAT           reduce using rule 68 (if -> IF ( relation ) instruction ELSE instruction .)
    INT             reduce using rule 68 (if -> IF ( relation ) instruction ELSE instruction .)
    [               reduce using rule 68 (if -> IF ( relation ) instruction ELSE instruction .)
    ZEROS           reduce using rule 68 (if -> IF ( relation ) instruction ELSE instruction .)
    EYE             reduce using rule 68 (if -> IF ( relation ) instruction ELSE instruction .)
    ONES            reduce using rule 68 (if -> IF ( relation ) instruction ELSE instruction .)
    STRING          reduce using rule 68 (if -> IF ( relation ) instruction ELSE instruction .)
    $end            reduce using rule 68 (if -> IF ( relation ) instruction ELSE instruction .)
    }               reduce using rule 68 (if -> IF ( relation ) instruction ELSE instruction .)
    ELSE            reduce using rule 68 (if -> IF ( relation ) instruction ELSE instruction .)

