
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocIFXnonassocELSEnonassoc=SUBASSIGNADDASSIGNMULASSIGNDIVASSIGNright:leftLTGTLEGENEEQleft+-left*/leftDOTADDDOTSUBleftDOTMULDOTDIVrightID[rightUMINUSleft\'ADDASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQ EYE FLOAT FOR GE GT ID IF INT LE LT MULASSIGN NE ONES PRINT RETURN STRING SUBASSIGN WHILE ZEROSprogram : instructions_optinstructions_opt : instructions\n                        | emptyinstructions : instructions instruction\n                    | instruction empty :instruction : instruction_block\n                   | assignment \';\'\n                   | relation \';\'\n                   | expression \';\'\n                   | break \';\'\n                   | continue \';\'\n                   | return \';\'\n                   | print \';\'\n                   | if\n                   | while\n                   | for\n                   | \';\' instruction_block : \'{\' instructions \'}\'break : BREAKcontinue : CONTINUEreturn : RETURN\n              | RETURN expressionprint : PRINT value_listassignment : var assign_op expression\n                  | ref assign_op expression assign_op : \'=\'\n                 | ADDASSIGN\n                 | SUBASSIGN\n                 | MULASSIGN\n                 | DIVASSIGNvar : IDref : ID \'[\' value_list \']\' expression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expression\n                  | expression DOTADD expression\n                  | expression DOTSUB expression\n                  | expression DOTMUL expression\n                  | expression DOTDIV expressionexpression : \'(\' expression  \')\' expression : var\n                 | ref\n                 | number\n                 | list\n                 | function\n                 | stringstring : STRINGfunction : ZEROS \'(\' value_list \')\'\n                | EYE \'(\' value_list \')\'\n                | ONES \'(\' value_list \')\'list : \'[\' value_list \']\'\n            | \'[\' \']\' value_list : value_list \',\' expression\n                  | expressionexpression : expression "\'" number : FLOATnumber : INTexpression : \'-\' expression %prec UMINUSrelation : expression LT expression\n                | expression GT expression\n                | expression LE expression\n                | expression GE expression\n                | expression NE expression\n                | expression EQ expressionif : IF \'(\' relation \')\' instruction %prec IFX\n          | IF \'(\' relation \')\' instruction ELSE instructionwhile : WHILE \'(\' relation \')\' instructionrange : expression \':\' expressionfor : FOR ID \'=\' range instruction'
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,8,15,16,17,42,43,44,45,61,62,63,64,103,126,127,128,132,],[-6,0,-1,-2,-3,-5,-7,-18,-15,-16,-17,-4,-8,-9,-10,-11,-12,-13,-14,-19,-67,-69,-71,-68,]),';':([0,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,23,24,25,26,27,28,29,34,36,37,41,42,43,44,45,60,61,62,63,64,65,73,74,75,77,78,79,85,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,113,117,118,119,120,122,123,124,125,126,127,128,130,131,132,],[8,8,-5,-7,43,-18,44,45,61,62,63,64,-15,-16,-17,8,-43,-44,-45,-46,-47,-48,-20,-21,-22,-32,-58,-59,-49,-4,-8,-9,-10,-57,-11,-12,-13,-14,8,-60,-43,-44,-23,-24,-56,-54,-61,-62,-63,-64,-65,-66,-34,-35,-36,-37,-38,-39,-40,-41,-19,-25,-26,-42,-53,-55,8,8,8,-33,-50,-51,-52,-67,-69,-71,8,-70,-68,]),'{':([0,3,5,6,8,15,16,17,18,23,24,25,26,34,36,37,41,42,43,44,45,60,61,62,63,64,65,73,74,75,85,95,96,97,98,99,100,101,102,103,106,113,118,119,120,122,123,124,125,126,127,128,130,131,132,],[18,18,-5,-7,-18,-15,-16,-17,18,-45,-46,-47,-48,-32,-58,-59,-49,-4,-8,-9,-10,-57,-11,-12,-13,-14,18,-60,-43,-44,-54,-34,-35,-36,-37,-38,-39,-40,-41,-19,-42,-53,18,18,18,-33,-50,-51,-52,-67,-69,-71,18,-70,-68,]),'(':([0,3,5,6,8,15,16,17,18,21,22,23,24,25,26,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,81,83,85,86,87,88,95,96,97,98,99,100,101,102,103,106,107,111,113,118,119,120,122,123,124,125,126,127,128,129,130,131,132,],[22,22,-5,-7,-18,-15,-16,-17,22,22,22,-45,-46,-47,-48,22,22,80,81,-32,22,-58,-59,86,87,88,-49,-4,-8,-9,-10,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-57,-11,-12,-13,-14,22,22,-27,-28,-29,-30,-31,22,-60,-43,-44,22,22,22,-54,22,22,22,-34,-35,-36,-37,-38,-39,-40,-41,-19,-42,22,22,-53,22,22,22,-33,-50,-51,-52,-67,-69,-71,22,22,-70,-68,]),'-':([0,3,5,6,8,10,15,16,17,18,19,20,21,22,23,24,25,26,29,30,34,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,111,113,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,],[21,21,-5,-7,-18,53,-15,-16,-17,21,-43,-44,21,21,-45,-46,-47,-48,21,21,-32,21,-58,-59,-49,-4,-8,-9,-10,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-57,-11,-12,-13,-14,21,21,-27,-28,-29,-30,-31,21,-60,-43,-44,53,53,53,21,21,21,-54,21,21,21,53,53,53,53,53,53,-34,-35,-36,-37,-38,-39,-40,-41,-19,53,53,-42,21,53,21,-53,53,21,21,21,53,-33,-50,-51,-52,-67,-69,-71,21,21,53,-68,]),'BREAK':([0,3,5,6,8,15,16,17,18,23,24,25,26,34,36,37,41,42,43,44,45,60,61,62,63,64,65,73,74,75,85,95,96,97,98,99,100,101,102,103,106,113,118,119,120,122,123,124,125,126,127,128,130,131,132,],[27,27,-5,-7,-18,-15,-16,-17,27,-45,-46,-47,-48,-32,-58,-59,-49,-4,-8,-9,-10,-57,-11,-12,-13,-14,27,-60,-43,-44,-54,-34,-35,-36,-37,-38,-39,-40,-41,-19,-42,-53,27,27,27,-33,-50,-51,-52,-67,-69,-71,27,-70,-68,]),'CONTINUE':([0,3,5,6,8,15,16,17,18,23,24,25,26,34,36,37,41,42,43,44,45,60,61,62,63,64,65,73,74,75,85,95,96,97,98,99,100,101,102,103,106,113,118,119,120,122,123,124,125,126,127,128,130,131,132,],[28,28,-5,-7,-18,-15,-16,-17,28,-45,-46,-47,-48,-32,-58,-59,-49,-4,-8,-9,-10,-57,-11,-12,-13,-14,28,-60,-43,-44,-54,-34,-35,-36,-37,-38,-39,-40,-41,-19,-42,-53,28,28,28,-33,-50,-51,-52,-67,-69,-71,28,-70,-68,]),'RETURN':([0,3,5,6,8,15,16,17,18,23,24,25,26,34,36,37,41,42,43,44,45,60,61,62,63,64,65,73,74,75,85,95,96,97,98,99,100,101,102,103,106,113,118,119,120,122,123,124,125,126,127,128,130,131,132,],[29,29,-5,-7,-18,-15,-16,-17,29,-45,-46,-47,-48,-32,-58,-59,-49,-4,-8,-9,-10,-57,-11,-12,-13,-14,29,-60,-43,-44,-54,-34,-35,-36,-37,-38,-39,-40,-41,-19,-42,-53,29,29,29,-33,-50,-51,-52,-67,-69,-71,29,-70,-68,]),'PRINT':([0,3,5,6,8,15,16,17,18,23,24,25,26,34,36,37,41,42,43,44,45,60,61,62,63,64,65,73,74,75,85,95,96,97,98,99,100,101,102,103,106,113,118,119,120,122,123,124,125,126,127,128,130,131,132,],[30,30,-5,-7,-18,-15,-16,-17,30,-45,-46,-47,-48,-32,-58,-59,-49,-4,-8,-9,-10,-57,-11,-12,-13,-14,30,-60,-43,-44,-54,-34,-35,-36,-37,-38,-39,-40,-41,-19,-42,-53,30,30,30,-33,-50,-51,-52,-67,-69,-71,30,-70,-68,]),'IF':([0,3,5,6,8,15,16,17,18,23,24,25,26,34,36,37,41,42,43,44,45,60,61,62,63,64,65,73,74,75,85,95,96,97,98,99,100,101,102,103,106,113,118,119,120,122,123,124,125,126,127,128,130,131,132,],[31,31,-5,-7,-18,-15,-16,-17,31,-45,-46,-47,-48,-32,-58,-59,-49,-4,-8,-9,-10,-57,-11,-12,-13,-14,31,-60,-43,-44,-54,-34,-35,-36,-37,-38,-39,-40,-41,-19,-42,-53,31,31,31,-33,-50,-51,-52,-67,-69,-71,31,-70,-68,]),'WHILE':([0,3,5,6,8,15,16,17,18,23,24,25,26,34,36,37,41,42,43,44,45,60,61,62,63,64,65,73,74,75,85,95,96,97,98,99,100,101,102,103,106,113,118,119,120,122,123,124,125,126,127,128,130,131,132,],[32,32,-5,-7,-18,-15,-16,-17,32,-45,-46,-47,-48,-32,-58,-59,-49,-4,-8,-9,-10,-57,-11,-12,-13,-14,32,-60,-43,-44,-54,-34,-35,-36,-37,-38,-39,-40,-41,-19,-42,-53,32,32,32,-33,-50,-51,-52,-67,-69,-71,32,-70,-68,]),'FOR':([0,3,5,6,8,15,16,17,18,23,24,25,26,34,36,37,41,42,43,44,45,60,61,62,63,64,65,73,74,75,85,95,96,97,98,99,100,101,102,103,106,113,118,119,120,122,123,124,125,126,127,128,130,131,132,],[33,33,-5,-7,-18,-15,-16,-17,33,-45,-46,-47,-48,-32,-58,-59,-49,-4,-8,-9,-10,-57,-11,-12,-13,-14,33,-60,-43,-44,-54,-34,-35,-36,-37,-38,-39,-40,-41,-19,-42,-53,33,33,33,-33,-50,-51,-52,-67,-69,-71,33,-70,-68,]),'ID':([0,3,5,6,8,15,16,17,18,21,22,23,24,25,26,29,30,33,34,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,81,83,85,86,87,88,95,96,97,98,99,100,101,102,103,106,107,111,113,118,119,120,122,123,124,125,126,127,128,129,130,131,132,],[34,34,-5,-7,-18,-15,-16,-17,34,34,34,-45,-46,-47,-48,34,34,82,-32,34,-58,-59,-49,-4,-8,-9,-10,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-57,-11,-12,-13,-14,34,34,-27,-28,-29,-30,-31,34,-60,-43,-44,34,34,34,-54,34,34,34,-34,-35,-36,-37,-38,-39,-40,-41,-19,-42,34,34,-53,34,34,34,-33,-50,-51,-52,-67,-69,-71,34,34,-70,-68,]),'FLOAT':([0,3,5,6,8,15,16,17,18,21,22,23,24,25,26,29,30,34,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,81,83,85,86,87,88,95,96,97,98,99,100,101,102,103,106,107,111,113,118,119,120,122,123,124,125,126,127,128,129,130,131,132,],[36,36,-5,-7,-18,-15,-16,-17,36,36,36,-45,-46,-47,-48,36,36,-32,36,-58,-59,-49,-4,-8,-9,-10,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-57,-11,-12,-13,-14,36,36,-27,-28,-29,-30,-31,36,-60,-43,-44,36,36,36,-54,36,36,36,-34,-35,-36,-37,-38,-39,-40,-41,-19,-42,36,36,-53,36,36,36,-33,-50,-51,-52,-67,-69,-71,36,36,-70,-68,]),'INT':([0,3,5,6,8,15,16,17,18,21,22,23,24,25,26,29,30,34,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,81,83,85,86,87,88,95,96,97,98,99,100,101,102,103,106,107,111,113,118,119,120,122,123,124,125,126,127,128,129,130,131,132,],[37,37,-5,-7,-18,-15,-16,-17,37,37,37,-45,-46,-47,-48,37,37,-32,37,-58,-59,-49,-4,-8,-9,-10,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-57,-11,-12,-13,-14,37,37,-27,-28,-29,-30,-31,37,-60,-43,-44,37,37,37,-54,37,37,37,-34,-35,-36,-37,-38,-39,-40,-41,-19,-42,37,37,-53,37,37,37,-33,-50,-51,-52,-67,-69,-71,37,37,-70,-68,]),'[':([0,3,5,6,8,15,16,17,18,21,22,23,24,25,26,29,30,34,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,81,83,85,86,87,88,95,96,97,98,99,100,101,102,103,106,107,111,113,118,119,120,122,123,124,125,126,127,128,129,130,131,132,],[35,35,-5,-7,-18,-15,-16,-17,35,35,35,-45,-46,-47,-48,35,35,83,35,-58,-59,-49,-4,-8,-9,-10,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-57,-11,-12,-13,-14,35,35,-27,-28,-29,-30,-31,35,-60,-43,-44,35,35,35,-54,35,35,35,-34,-35,-36,-37,-38,-39,-40,-41,-19,-42,35,35,-53,35,35,35,-33,-50,-51,-52,-67,-69,-71,35,35,-70,-68,]),'ZEROS':([0,3,5,6,8,15,16,17,18,21,22,23,24,25,26,29,30,34,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,81,83,85,86,87,88,95,96,97,98,99,100,101,102,103,106,107,111,113,118,119,120,122,123,124,125,126,127,128,129,130,131,132,],[38,38,-5,-7,-18,-15,-16,-17,38,38,38,-45,-46,-47,-48,38,38,-32,38,-58,-59,-49,-4,-8,-9,-10,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-57,-11,-12,-13,-14,38,38,-27,-28,-29,-30,-31,38,-60,-43,-44,38,38,38,-54,38,38,38,-34,-35,-36,-37,-38,-39,-40,-41,-19,-42,38,38,-53,38,38,38,-33,-50,-51,-52,-67,-69,-71,38,38,-70,-68,]),'EYE':([0,3,5,6,8,15,16,17,18,21,22,23,24,25,26,29,30,34,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,81,83,85,86,87,88,95,96,97,98,99,100,101,102,103,106,107,111,113,118,119,120,122,123,124,125,126,127,128,129,130,131,132,],[39,39,-5,-7,-18,-15,-16,-17,39,39,39,-45,-46,-47,-48,39,39,-32,39,-58,-59,-49,-4,-8,-9,-10,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-57,-11,-12,-13,-14,39,39,-27,-28,-29,-30,-31,39,-60,-43,-44,39,39,39,-54,39,39,39,-34,-35,-36,-37,-38,-39,-40,-41,-19,-42,39,39,-53,39,39,39,-33,-50,-51,-52,-67,-69,-71,39,39,-70,-68,]),'ONES':([0,3,5,6,8,15,16,17,18,21,22,23,24,25,26,29,30,34,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,81,83,85,86,87,88,95,96,97,98,99,100,101,102,103,106,107,111,113,118,119,120,122,123,124,125,126,127,128,129,130,131,132,],[40,40,-5,-7,-18,-15,-16,-17,40,40,40,-45,-46,-47,-48,40,40,-32,40,-58,-59,-49,-4,-8,-9,-10,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-57,-11,-12,-13,-14,40,40,-27,-28,-29,-30,-31,40,-60,-43,-44,40,40,40,-54,40,40,40,-34,-35,-36,-37,-38,-39,-40,-41,-19,-42,40,40,-53,40,40,40,-33,-50,-51,-52,-67,-69,-71,40,40,-70,-68,]),'STRING':([0,3,5,6,8,15,16,17,18,21,22,23,24,25,26,29,30,34,35,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,81,83,85,86,87,88,95,96,97,98,99,100,101,102,103,106,107,111,113,118,119,120,122,123,124,125,126,127,128,129,130,131,132,],[41,41,-5,-7,-18,-15,-16,-17,41,41,41,-45,-46,-47,-48,41,41,-32,41,-58,-59,-49,-4,-8,-9,-10,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-57,-11,-12,-13,-14,41,41,-27,-28,-29,-30,-31,41,-60,-43,-44,41,41,41,-54,41,41,41,-34,-35,-36,-37,-38,-39,-40,-41,-19,-42,41,41,-53,41,41,41,-33,-50,-51,-52,-67,-69,-71,41,41,-70,-68,]),'}':([5,6,8,15,16,17,42,43,44,45,61,62,63,64,65,103,126,127,128,132,],[-5,-7,-18,-15,-16,-17,-4,-8,-9,-10,-11,-12,-13,-14,103,-19,-67,-69,-71,-68,]),'ELSE':([6,8,15,16,17,43,44,45,61,62,63,64,103,126,127,128,132,],[-7,-18,-15,-16,-17,-8,-9,-10,-11,-12,-13,-14,-19,130,-69,-71,-68,]),'LT':([10,19,20,23,24,25,26,34,36,37,41,60,73,74,75,85,95,96,97,98,99,100,101,102,106,109,113,122,123,124,125,],[46,-43,-44,-45,-46,-47,-48,-32,-58,-59,-49,-57,-60,-43,-44,-54,-34,-35,-36,-37,-38,-39,-40,-41,-42,46,-53,-33,-50,-51,-52,]),'GT':([10,19,20,23,24,25,26,34,36,37,41,60,73,74,75,85,95,96,97,98,99,100,101,102,106,109,113,122,123,124,125,],[47,-43,-44,-45,-46,-47,-48,-32,-58,-59,-49,-57,-60,-43,-44,-54,-34,-35,-36,-37,-38,-39,-40,-41,-42,47,-53,-33,-50,-51,-52,]),'LE':([10,19,20,23,24,25,26,34,36,37,41,60,73,74,75,85,95,96,97,98,99,100,101,102,106,109,113,122,123,124,125,],[48,-43,-44,-45,-46,-47,-48,-32,-58,-59,-49,-57,-60,-43,-44,-54,-34,-35,-36,-37,-38,-39,-40,-41,-42,48,-53,-33,-50,-51,-52,]),'GE':([10,19,20,23,24,25,26,34,36,37,41,60,73,74,75,85,95,96,97,98,99,100,101,102,106,109,113,122,123,124,125,],[49,-43,-44,-45,-46,-47,-48,-32,-58,-59,-49,-57,-60,-43,-44,-54,-34,-35,-36,-37,-38,-39,-40,-41,-42,49,-53,-33,-50,-51,-52,]),'NE':([10,19,20,23,24,25,26,34,36,37,41,60,73,74,75,85,95,96,97,98,99,100,101,102,106,109,113,122,123,124,125,],[50,-43,-44,-45,-46,-47,-48,-32,-58,-59,-49,-57,-60,-43,-44,-54,-34,-35,-36,-37,-38,-39,-40,-41,-42,50,-53,-33,-50,-51,-52,]),'EQ':([10,19,20,23,24,25,26,34,36,37,41,60,73,74,75,85,95,96,97,98,99,100,101,102,106,109,113,122,123,124,125,],[51,-43,-44,-45,-46,-47,-48,-32,-58,-59,-49,-57,-60,-43,-44,-54,-34,-35,-36,-37,-38,-39,-40,-41,-42,51,-53,-33,-50,-51,-52,]),'+':([10,19,20,23,24,25,26,34,36,37,41,60,73,74,75,76,77,79,85,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,109,113,117,121,122,123,124,125,131,],[52,-43,-44,-45,-46,-47,-48,-32,-58,-59,-49,-57,-60,-43,-44,52,52,52,-54,52,52,52,52,52,52,-34,-35,-36,-37,-38,-39,-40,-41,52,52,-42,52,-53,52,52,-33,-50,-51,-52,52,]),'*':([10,19,20,23,24,25,26,34,36,37,41,60,73,74,75,76,77,79,85,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,109,113,117,121,122,123,124,125,131,],[54,-43,-44,-45,-46,-47,-48,-32,-58,-59,-49,-57,-60,-43,-44,54,54,54,-54,54,54,54,54,54,54,54,54,-36,-37,-38,-39,-40,-41,54,54,-42,54,-53,54,54,-33,-50,-51,-52,54,]),'/':([10,19,20,23,24,25,26,34,36,37,41,60,73,74,75,76,77,79,85,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,109,113,117,121,122,123,124,125,131,],[55,-43,-44,-45,-46,-47,-48,-32,-58,-59,-49,-57,-60,-43,-44,55,55,55,-54,55,55,55,55,55,55,55,55,-36,-37,-38,-39,-40,-41,55,55,-42,55,-53,55,55,-33,-50,-51,-52,55,]),'DOTADD':([10,19,20,23,24,25,26,34,36,37,41,60,73,74,75,76,77,79,85,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,109,113,117,121,122,123,124,125,131,],[56,-43,-44,-45,-46,-47,-48,-32,-58,-59,-49,-57,-60,-43,-44,56,56,56,-54,56,56,56,56,56,56,56,56,56,56,-38,-39,-40,-41,56,56,-42,56,-53,56,56,-33,-50,-51,-52,56,]),'DOTSUB':([10,19,20,23,24,25,26,34,36,37,41,60,73,74,75,76,77,79,85,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,109,113,117,121,122,123,124,125,131,],[57,-43,-44,-45,-46,-47,-48,-32,-58,-59,-49,-57,-60,-43,-44,57,57,57,-54,57,57,57,57,57,57,57,57,57,57,-38,-39,-40,-41,57,57,-42,57,-53,57,57,-33,-50,-51,-52,57,]),'DOTMUL':([10,19,20,23,24,25,26,34,36,37,41,60,73,74,75,76,77,79,85,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,109,113,117,121,122,123,124,125,131,],[58,-43,-44,-45,-46,-47,-48,-32,-58,-59,-49,-57,-60,-43,-44,58,58,58,-54,58,58,58,58,58,58,58,58,58,58,58,58,-40,-41,58,58,-42,58,-53,58,58,-33,-50,-51,-52,58,]),'DOTDIV':([10,19,20,23,24,25,26,34,36,37,41,60,73,74,75,76,77,79,85,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,109,113,117,121,122,123,124,125,131,],[59,-43,-44,-45,-46,-47,-48,-32,-58,-59,-49,-57,-60,-43,-44,59,59,59,-54,59,59,59,59,59,59,59,59,59,59,59,59,-40,-41,59,59,-42,59,-53,59,59,-33,-50,-51,-52,59,]),"'":([10,19,20,23,24,25,26,34,36,37,41,60,73,74,75,76,77,79,85,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,109,113,117,121,122,123,124,125,131,],[60,-43,-44,-45,-46,-47,-48,-32,-58,-59,-49,-57,60,-43,-44,60,60,60,-54,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-42,60,-53,60,60,-33,-50,-51,-52,60,]),'=':([19,20,34,82,122,],[67,67,-32,111,-33,]),'ADDASSIGN':([19,20,34,122,],[68,68,-32,-33,]),'SUBASSIGN':([19,20,34,122,],[69,69,-32,-33,]),'MULASSIGN':([19,20,34,122,],[70,70,-32,-33,]),'DIVASSIGN':([19,20,34,122,],[71,71,-32,-33,]),')':([23,24,25,26,34,36,37,41,60,73,74,75,76,79,85,89,90,91,92,93,94,95,96,97,98,99,100,101,102,106,108,110,113,114,115,116,117,122,123,124,125,],[-45,-46,-47,-48,-32,-58,-59,-49,-57,-60,-43,-44,106,-56,-54,-61,-62,-63,-64,-65,-66,-34,-35,-36,-37,-38,-39,-40,-41,-42,118,119,-53,123,124,125,-55,-33,-50,-51,-52,]),',':([23,24,25,26,34,36,37,41,60,73,74,75,78,79,84,85,95,96,97,98,99,100,101,102,106,112,113,114,115,116,117,122,123,124,125,],[-45,-46,-47,-48,-32,-58,-59,-49,-57,-60,-43,-44,107,-56,107,-54,-34,-35,-36,-37,-38,-39,-40,-41,-42,107,-53,107,107,107,-55,-33,-50,-51,-52,]),']':([23,24,25,26,34,35,36,37,41,60,73,74,75,79,84,85,95,96,97,98,99,100,101,102,106,112,113,117,122,123,124,125,],[-45,-46,-47,-48,-32,85,-58,-59,-49,-57,-60,-43,-44,-56,113,-54,-34,-35,-36,-37,-38,-39,-40,-41,-42,122,-53,-55,-33,-50,-51,-52,]),':':([23,24,25,26,34,36,37,41,60,73,74,75,85,95,96,97,98,99,100,101,102,106,113,121,122,123,124,125,],[-45,-46,-47,-48,-32,-58,-59,-49,-57,-60,-43,-44,-54,-34,-35,-36,-37,-38,-39,-40,-41,-42,-53,129,-33,-50,-51,-52,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions_opt':([0,],[2,]),'instructions':([0,18,],[3,65,]),'empty':([0,],[4,]),'instruction':([0,3,18,65,118,119,120,130,],[5,42,5,42,126,127,128,132,]),'instruction_block':([0,3,18,65,118,119,120,130,],[6,6,6,6,6,6,6,6,]),'assignment':([0,3,18,65,118,119,120,130,],[7,7,7,7,7,7,7,7,]),'relation':([0,3,18,65,80,81,118,119,120,130,],[9,9,9,9,108,110,9,9,9,9,]),'expression':([0,3,18,21,22,29,30,35,46,47,48,49,50,51,52,53,54,55,56,57,58,59,65,66,72,80,81,83,86,87,88,107,111,118,119,120,129,130,],[10,10,10,73,76,77,79,79,89,90,91,92,93,94,95,96,97,98,99,100,101,102,10,104,105,109,109,79,79,79,79,117,121,10,10,10,131,10,]),'break':([0,3,18,65,118,119,120,130,],[11,11,11,11,11,11,11,11,]),'continue':([0,3,18,65,118,119,120,130,],[12,12,12,12,12,12,12,12,]),'return':([0,3,18,65,118,119,120,130,],[13,13,13,13,13,13,13,13,]),'print':([0,3,18,65,118,119,120,130,],[14,14,14,14,14,14,14,14,]),'if':([0,3,18,65,118,119,120,130,],[15,15,15,15,15,15,15,15,]),'while':([0,3,18,65,118,119,120,130,],[16,16,16,16,16,16,16,16,]),'for':([0,3,18,65,118,119,120,130,],[17,17,17,17,17,17,17,17,]),'var':([0,3,18,21,22,29,30,35,46,47,48,49,50,51,52,53,54,55,56,57,58,59,65,66,72,80,81,83,86,87,88,107,111,118,119,120,129,130,],[19,19,19,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,19,74,74,74,74,74,74,74,74,74,74,19,19,19,74,19,]),'ref':([0,3,18,21,22,29,30,35,46,47,48,49,50,51,52,53,54,55,56,57,58,59,65,66,72,80,81,83,86,87,88,107,111,118,119,120,129,130,],[20,20,20,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,20,75,75,75,75,75,75,75,75,75,75,20,20,20,75,20,]),'number':([0,3,18,21,22,29,30,35,46,47,48,49,50,51,52,53,54,55,56,57,58,59,65,66,72,80,81,83,86,87,88,107,111,118,119,120,129,130,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'list':([0,3,18,21,22,29,30,35,46,47,48,49,50,51,52,53,54,55,56,57,58,59,65,66,72,80,81,83,86,87,88,107,111,118,119,120,129,130,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'function':([0,3,18,21,22,29,30,35,46,47,48,49,50,51,52,53,54,55,56,57,58,59,65,66,72,80,81,83,86,87,88,107,111,118,119,120,129,130,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'string':([0,3,18,21,22,29,30,35,46,47,48,49,50,51,52,53,54,55,56,57,58,59,65,66,72,80,81,83,86,87,88,107,111,118,119,120,129,130,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'assign_op':([19,20,],[66,72,]),'value_list':([30,35,83,86,87,88,],[78,84,112,114,115,116,]),'range':([111,],[120,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions_opt','program',1,'p_program','mparser.py',34),
  ('instructions_opt -> instructions','instructions_opt',1,'p_instructions_opt','mparser.py',38),
  ('instructions_opt -> empty','instructions_opt',1,'p_instructions_opt','mparser.py',39),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','mparser.py',43),
  ('instructions -> instruction','instructions',1,'p_instructions','mparser.py',44),
  ('empty -> <empty>','empty',0,'p_empty','mparser.py',52),
  ('instruction -> instruction_block','instruction',1,'p_instruction','mparser.py',57),
  ('instruction -> assignment ;','instruction',2,'p_instruction','mparser.py',58),
  ('instruction -> relation ;','instruction',2,'p_instruction','mparser.py',59),
  ('instruction -> expression ;','instruction',2,'p_instruction','mparser.py',60),
  ('instruction -> break ;','instruction',2,'p_instruction','mparser.py',61),
  ('instruction -> continue ;','instruction',2,'p_instruction','mparser.py',62),
  ('instruction -> return ;','instruction',2,'p_instruction','mparser.py',63),
  ('instruction -> print ;','instruction',2,'p_instruction','mparser.py',64),
  ('instruction -> if','instruction',1,'p_instruction','mparser.py',65),
  ('instruction -> while','instruction',1,'p_instruction','mparser.py',66),
  ('instruction -> for','instruction',1,'p_instruction','mparser.py',67),
  ('instruction -> ;','instruction',1,'p_instruction','mparser.py',68),
  ('instruction_block -> { instructions }','instruction_block',3,'p_instruction_block','mparser.py',72),
  ('break -> BREAK','break',1,'p_break','mparser.py',76),
  ('continue -> CONTINUE','continue',1,'p_continue','mparser.py',80),
  ('return -> RETURN','return',1,'p_return','mparser.py',84),
  ('return -> RETURN expression','return',2,'p_return','mparser.py',85),
  ('print -> PRINT value_list','print',2,'p_print','mparser.py',89),
  ('assignment -> var assign_op expression','assignment',3,'p_assignment','mparser.py',94),
  ('assignment -> ref assign_op expression','assignment',3,'p_assignment','mparser.py',95),
  ('assign_op -> =','assign_op',1,'p_assign_op','mparser.py',100),
  ('assign_op -> ADDASSIGN','assign_op',1,'p_assign_op','mparser.py',101),
  ('assign_op -> SUBASSIGN','assign_op',1,'p_assign_op','mparser.py',102),
  ('assign_op -> MULASSIGN','assign_op',1,'p_assign_op','mparser.py',103),
  ('assign_op -> DIVASSIGN','assign_op',1,'p_assign_op','mparser.py',104),
  ('var -> ID','var',1,'p_var','mparser.py',108),
  ('ref -> ID [ value_list ]','ref',4,'p_ref','mparser.py',113),
  ('expression -> expression + expression','expression',3,'p_expression_binop','mparser.py',117),
  ('expression -> expression - expression','expression',3,'p_expression_binop','mparser.py',118),
  ('expression -> expression * expression','expression',3,'p_expression_binop','mparser.py',119),
  ('expression -> expression / expression','expression',3,'p_expression_binop','mparser.py',120),
  ('expression -> expression DOTADD expression','expression',3,'p_expression_binop','mparser.py',121),
  ('expression -> expression DOTSUB expression','expression',3,'p_expression_binop','mparser.py',122),
  ('expression -> expression DOTMUL expression','expression',3,'p_expression_binop','mparser.py',123),
  ('expression -> expression DOTDIV expression','expression',3,'p_expression_binop','mparser.py',124),
  ('expression -> ( expression )','expression',3,'p_expression_group','mparser.py',129),
  ('expression -> var','expression',1,'p_expression','mparser.py',134),
  ('expression -> ref','expression',1,'p_expression','mparser.py',135),
  ('expression -> number','expression',1,'p_expression','mparser.py',136),
  ('expression -> list','expression',1,'p_expression','mparser.py',137),
  ('expression -> function','expression',1,'p_expression','mparser.py',138),
  ('expression -> string','expression',1,'p_expression','mparser.py',139),
  ('string -> STRING','string',1,'p_string','mparser.py',143),
  ('function -> ZEROS ( value_list )','function',4,'p_function','mparser.py',147),
  ('function -> EYE ( value_list )','function',4,'p_function','mparser.py',148),
  ('function -> ONES ( value_list )','function',4,'p_function','mparser.py',149),
  ('list -> [ value_list ]','list',3,'p_list','mparser.py',153),
  ('list -> [ ]','list',2,'p_list','mparser.py',154),
  ('value_list -> value_list , expression','value_list',3,'p_value_list','mparser.py',159),
  ('value_list -> expression','value_list',1,'p_value_list','mparser.py',160),
  ("expression -> expression '",'expression',2,'p_expression_transpose','mparser.py',167),
  ('number -> FLOAT','number',1,'p_number_float','mparser.py',172),
  ('number -> INT','number',1,'p_number_int','mparser.py',177),
  ('expression -> - expression','expression',2,'p_expr_uminus','mparser.py',182),
  ('relation -> expression LT expression','relation',3,'p_relation','mparser.py',186),
  ('relation -> expression GT expression','relation',3,'p_relation','mparser.py',187),
  ('relation -> expression LE expression','relation',3,'p_relation','mparser.py',188),
  ('relation -> expression GE expression','relation',3,'p_relation','mparser.py',189),
  ('relation -> expression NE expression','relation',3,'p_relation','mparser.py',190),
  ('relation -> expression EQ expression','relation',3,'p_relation','mparser.py',191),
  ('if -> IF ( relation ) instruction','if',5,'p_instruction_if','mparser.py',195),
  ('if -> IF ( relation ) instruction ELSE instruction','if',7,'p_instruction_if','mparser.py',196),
  ('while -> WHILE ( relation ) instruction','while',5,'p_instruction_while','mparser.py',204),
  ('range -> expression : expression','range',3,'p_range','mparser.py',209),
  ('for -> FOR ID = range instruction','for',5,'p_instruction_for','mparser.py',214),
]
